{
  "openapi": "3.0.0",
  "info": {
    "title": "TP Hotel",
    "version": "11.11.0"
  },
  "servers": [
    {
      "url": "https://api.pp.travelport.com/11/hotel"
    },
    {
      "url": "https://api.travelport.com/11/hotel"
    }
  ],
  "security": [
    {
      "OAuth2": []
    }
  ],
  "paths": {
    "/search/propertiesdetail": {
      "get": {
        "tags": [
          "Search Hotel"
        ],
        "summary": "Request hotel details",
        "description": "The optional Hotel Details request retrieves for one specified property a detailed description and additional images after a hotel search.",
        "operationId": "GetPropertiesDetail",
        "parameters": [
          {
            "name": "chainCode",
            "in": "query",
            "description": "Hotel chain code",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 5,
              "minLength": 2,
              "pattern": "([a-zA-Z0-9]{2,5})",
              "type": "string"
            },
            "example": "HL"
          },
          {
            "name": "propertyCode",
            "in": "query",
            "description": "Property code",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ImageSize",
            "in": "query",
            "description": "The size of the image to be returned",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/ImageSizeEnum"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertiesResponseWrapper"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request- 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "402": {
            "description": "PaymentRequired - 402",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - 404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - 500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/search/properties/search": {
      "post": {
        "tags": [
          "Search Hotel"
        ],
        "summary": "Search hotels by location",
        "description": "The Hotel Search by Location request searches for hotels by (a) geographic coordinate information (b) city or state/province, and country or (c) IATA airport or city code.The response returns a list of properties using the same structure as the Hotel Search by ID response.",
        "operationId": "SearchProperties",
        "parameters": [
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertiesQuerySearchWrapper"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertiesResponseWrapper"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request- 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "402": {
            "description": "PaymentRequired - 402",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - 404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - 500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/search/properties/precision/location": {
      "post": {
        "tags": [
          "Precision Search Hotel"
        ],
        "summary": "Search hotels by location",
        "description": "The Hotel Search by Location request searches for hotels by (a) geographic coordinate information (b) city or state/province, and country or (c) IATA airport or city code.The response returns a list of properties using the same structure as the Hotel Search by ID response.",
        "operationId": "PrecisionSearchProperties",
        "parameters": [
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertiesQueryPrecisionSearchWrapper"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertiesResponseWrapper"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request- 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "402": {
            "description": "PaymentRequired - 402",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - 404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - 500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/search/properties": {
      "post": {
        "tags": [
          "Search Hotel"
        ],
        "summary": "Search hotels by property ID",
        "description": "The Hotel Search by ID request searches for hotels by search by one or more property IDs. The response returns a list of properties based on the ID/s sent, and is the same as the Hotel Search by Location response.",
        "operationId": "Create",
        "parameters": [
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertiesQuerySpecificPropertyListWrapper"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertiesResponseWrapper"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request- 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "402": {
            "description": "PaymentRequired - 402",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - 404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - 500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/search/properties/precision": {
      "post": {
        "tags": [
          "Precision Search Hotel"
        ],
        "summary": "Precision Search hotels by property ID",
        "description": "The Hotel Search by ID request searches for hotels by search by one or more property IDs. The response returns a list of properties based on the ID/s sent, and is the same as the Hotel Search by Location response.",
        "operationId": "CreatePrecision",
        "parameters": [
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertiesQuerySpecificPrecisionPropertyListWrapper"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertiesResponseWrapper"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request- 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "402": {
            "description": "PaymentRequired - 402",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - 404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - 500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/search/properties/{identifier}": {
      "get": {
        "tags": [
          "Search Hotel"
        ],
        "summary": "Return additional search results (pagination)",
        "description": "Hotel Search uses pagination by default. The initial search response returns 25 properties, notes the total number of properties found, and includes an identifier to be used for retrieving additional pages. Call the GET pagination endpoint to retrieve each additional page of 25 properties until the end of the list is reached.The identifier used for paging is saved for 30 minutes. A new hotel search request must be performed after it expires.",
        "operationId": "GetPropertiesPage",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "The Identifier of the Properties from which a page is to be returned",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to be returned",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertiesResponseWrapper"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request- 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "402": {
            "description": "PaymentRequired - 402",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - 404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - 500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/availability/catalogofferingshospitality": {
      "post": {
        "tags": [
          "Hotel Availability"
        ],
        "summary": "Request hotel availability",
        "description": "Hotel Availability returns room types and rates available at one or more specified properties on specified dates.",
        "operationId": "CreateHotelAvailability",
        "parameters": [
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogOfferingsQueryRequestHospitalityWrapper"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogOfferingsHospitalityResponseWrapper"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request- 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "402": {
            "description": "PaymentRequired - 402",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - 404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - 500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/availability/buildfromproperties": {
      "post": {
        "tags": [
          "Hotel Availability"
        ],
        "summary": "Request hotel availability from precision search response",
        "description": "Hotel Availability returns room types and rates available at one or more specified properties on specified dates.",
        "operationId": "HotelAvailabilityFromProperties",
        "parameters": [
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogOfferingsQueryBuildFromPropertiesWrapper"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogOfferingsHospitalityResponseWrapper"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request- 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "402": {
            "description": "PaymentRequired - 402",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - 404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - 500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/rules/offershospitality/buildfromcatalogoffering": {
      "post": {
        "tags": [
          "Hotel Rules"
        ],
        "summary": "Available January 2023. Build rules by referenceing availability response",
        "operationId": "BuildHotelRulesFromCatalogOffering",
        "parameters": [
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferQueryBuildFromCatalogOfferingWrapper"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferHospitalityResponseWrapper"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request- 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "402": {
            "description": "PaymentRequired - 402",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - 404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - 500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/rules/offershospitality/buildfromrequest": {
      "post": {
        "tags": [
          "Hotel Rules"
        ],
        "summary": "Full Payload hotel rules request",
        "operationId": "CreateHotelRules",
        "parameters": [
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferQueryHospitalityRequestWrapper"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferHospitalityResponseWrapper"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request- 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "402": {
            "description": "PaymentRequired - 402",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - 404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - 500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/rules/offershospitality/buildfromcatalogofferings": {
      "post": {
        "tags": [
          "Hotel Rules"
        ],
        "summary": "To be deprecated and replaced with buildfromcatalogoffering",
        "operationId": "BuildFromCatalogOfferings",
        "parameters": [
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TravelportPlusSessionID",
            "in": "header",
            "description": "Travelport Plus Session ID used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferQueryBuildFromCatalogOfferingsHospitalityWrapper"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferHospitalityResponseWrapper"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request- 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "402": {
            "description": "PaymentRequired - 402",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - 404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - 500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/book/reservations": {
      "post": {
        "tags": [
          "Reservation Hotel"
        ],
        "summary": "Create a reservation",
        "description": "Create a reservation on the core or with the vendor/provider.",
        "operationId": "CreateHotelReservation",
        "parameters": [
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ReservationID"
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponseWrapper"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request- 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "402": {
            "description": "PaymentRequired - 402",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - 404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - 500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/book/reservations/build": {
      "post": {
        "tags": [
          "Reservation Hotel"
        ],
        "summary": "Single payload booking request",
        "description": "This full payload book request allows your to reference a hotel availability response and build the Reservation in a single API call.",
        "operationId": "BuildHotelReservation",
        "parameters": [
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReservationQueryBuildWrapper"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponseWrapper"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request- 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "402": {
            "description": "PaymentRequired - 402",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - 404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - 500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/book/reservations/{Identifier}": {
      "get": {
        "tags": [
          "Reservation Hotel"
        ],
        "summary": "Retrieve a Reservation",
        "description": "Retrieve details about a held booking, or PNR. While a PNR refers to a held booking that has not been ticketed, the PNR code persists after ticketing to provide the booking records. Once a PNR has been ticketed, you can still use PNR Retrieve to return both booking and ticketing details. A Ticket Display request can also be used to retrieve any ticketed itinerary.",
        "operationId": "RetrieveHotelReservation",
        "parameters": [
          {
            "name": "Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "detailViewInd",
            "in": "query",
            "description": "If true, ReservationDetail will be returned.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "identifierType",
            "in": "query",
            "description": "The type of identifier key used to retrieve the reservation",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/IdentifierTypeENUM"
            },
            "example": "Locator"
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponseWrapper"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request- 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "402": {
            "description": "PaymentRequired - 402",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - 404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - 500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Reservation Hotel"
        ],
        "summary": "Update a reservation",
        "description": "The Modify Reservation request can modify an existing reservation by changing any of the following - dates, payment information, traveler first and/or last name. You can also add comments to an existing reservation. Hotel Modify can be used only for Travelport itineraries at this time. When changing dates Travelport recommends that you first send an availability request for the new dates and look for the same booking code that is on the existing reservation. An availability request is not mandatory, but a modify request will fail if the new dates are not available.",
        "operationId": "UpdateHotelReservation",
        "parameters": [
          {
            "name": "Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ReservationID"
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponseWrapper"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request- 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "402": {
            "description": "PaymentRequired - 402",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - 404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - 500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/book/reservations/{reservationIdentifier}/canceloffer": {
      "put": {
        "tags": [
          "Reservation Hotel"
        ],
        "summary": "Cancel an Offer within a Reservation",
        "description": "Cancel an Offer by modifying the Reservation",
        "operationId": "CancelHotelOffer",
        "parameters": [
          {
            "name": "reservationIdentifier",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "supplierLocator",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            }
          },
          {
            "name": "offerID",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponseWrapper"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "402": {
            "description": "Payment Required - 402",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - 404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - 500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ImageSizeEnum": {
        "type": "string",
        "description": "Indicates the size of the image. Hospitality APIs no longer support thumbnail",
        "enum": [
          "Large",
          "Medium",
          "Small",
          "Thumbnail",
          "ExtraLarge"
        ]
      },
      "PropertiesResponseWrapper": {
        "properties": {
          "PropertiesResponse": {
            "$ref": "#/components/schemas/PropertiesResponse"
          }
        }
      },
      "PropertiesResponse": {
        "properties": {
          "Properties": {
            "$ref": "#/components/schemas/Properties"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "BaseResponse": {
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "Unique transaction, correlation or tracking id for a single request and reply i.e. for a single transaction. Should be a 128 bit GUID format. Also know as E2ETrackingId."
          },
          "traceId": {
            "type": "string",
            "description": "Optional ID for internal child transactions created for processing a single request (single transaction). Should be a 128 bit GUID format. Also known as ChildTrackingId."
          },
          "Result": {
            "$ref": "#/components/schemas/Result"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          },
          "NextSteps": {
            "$ref": "#/components/schemas/NextSteps"
          },
          "ReferenceList": {
            "maxItems": 5,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceList"
            }
          },
          "CurrencyRateConversion": {
            "maxItems": 5,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurrencyRateConversion"
            }
          }
        }
      },
      "Result": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "Result"
          },
          "status": {
            "$ref": "#/components/schemas/ResultStatusEnum"
          },
          "Error": {
            "maxItems": 50,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          },
          "Warning": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Warning"
            }
          }
        }
      },
      "ResultStatusEnum": {
        "type": "string",
        "description": "The status of an error or warning",
        "enum": [
          "Not processed",
          "Incomplete",
          "Complete",
          "Unknown"
        ]
      },
      "Error": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "Error"
          },
          "StatusCode": {
            "type": "integer",
            "description": "Http standard response code",
            "format": "int32"
          },
          "Message": {
            "maxLength": 4096,
            "type": "string",
            "description": "The Travelport standardized error or warning message"
          },
          "NameValuePair": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NameValuePair"
            }
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "NameValuePair": {
        "required": [
          "name"
        ],
        "properties": {
          "value": {
            "maxLength": 512,
            "type": "string",
            "example": "Sunday"
          },
          "id": {
            "type": "string",
            "description": "Optional internally referenced id",
            "example": "6"
          },
          "name": {
            "maxLength": 512,
            "type": "string",
            "description": "Key",
            "example": "Day1"
          }
        },
        "description": "Used for data stored in Name Value pairs"
      },
      "Warning": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "Error"
          },
          "StatusCode": {
            "type": "integer",
            "description": "Http standard response code",
            "format": "int32"
          },
          "Message": {
            "maxLength": 4096,
            "type": "string",
            "description": "The Travelport standardized error or warning message"
          },
          "NameValuePair": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NameValuePair"
            }
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "Identifier": {
        "properties": {
          "value": {
            "maxLength": 128,
            "type": "string",
            "example": "A0656EFF-FAF4-456F-B061-0161008D7C4E"
          },
          "authority": {
            "maxLength": 128,
            "type": "string",
            "description": "Name of the authoritative system that created this Guid",
            "example": "TVPT"
          }
        },
        "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database."
      },
      "NextSteps": {
        "required": [
          "NextStep",
          "baseURI"
        ],
        "properties": {
          "baseURI": {
            "type": "string",
            "description": "The base portion of the uri in order to shorten the uri's in the individual steps"
          },
          "id": {
            "type": "string",
            "description": "Optional internally referenced id",
            "example": "5"
          },
          "NextStep": {
            "maxItems": 20,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NextStep"
            }
          }
        }
      },
      "NextStep": {
        "required": [
          "action",
          "method"
        ],
        "properties": {
          "value": {
            "type": "string",
            "example": "www.resourcelocation.com"
          },
          "id": {
            "type": "string",
            "description": "Identifier for the Next Step",
            "example": "2"
          },
          "action": {
            "maxLength": 32,
            "type": "string",
            "description": "The action this next step is intended to achieve",
            "example": "cancel"
          },
          "method": {
            "$ref": "#/components/schemas/NextStepMethodEnum"
          },
          "description": {
            "maxLength": 32,
            "type": "string",
            "description": "Additional clarification for the next step",
            "example": "remove offer from the order"
          }
        },
        "description": "A URL that describes a step that can be applied to the resource containing the next step structure."
      },
      "NextStepMethodEnum": {
        "type": "string",
        "description": "Describes the set of potential methods that can be taken after an operation.",
        "enum": [
          "GET",
          "DELETE",
          "PUT",
          "POST"
        ]
      },
      "ReferenceList": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "ReferenceListFlight"
          },
          "id": {
            "type": "string",
            "description": "Uniquely identifies for the Reference List"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "CurrencyRateConversion": {
        "required": [
          "ConversionRate",
          "SourceCurrency",
          "TargetCurrency"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "default": "CurrencyRateConversion"
          },
          "SourceCurrency": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "TargetCurrency": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "ConversionRate": {
            "$ref": "#/components/schemas/ConversionRate"
          }
        }
      },
      "CurrencyCode": {
        "properties": {
          "value": {
            "pattern": "[a-zA-Z]{3}",
            "type": "string",
            "example": "USD"
          },
          "codeAuthority": {
            "maxLength": 32,
            "type": "string",
            "description": "Currency code authority",
            "example": "ISO 4217"
          },
          "decimalPlace": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "pattern": "([0-4])",
            "type": "integer",
            "description": "Currency code decimal place",
            "format": "int32",
            "example": 4
          },
          "decimalAuthority": {
            "maxLength": 32,
            "type": "string",
            "description": "Currency code decimal authority",
            "example": "ISO 4217"
          }
        },
        "description": "Currency codes are the three-letter alphabetic codes that represent the various currencies used throughout the world."
      },
      "ConversionRate": {
        "properties": {
          "value": {
            "type": "number",
            "format": "float"
          },
          "rateAuthority": {
            "maxLength": 32,
            "type": "string",
            "description": "Rate authority",
            "example": "ISO 4217"
          },
          "rateAsOf": {
            "type": "string",
            "description": "Rate as of",
            "format": "date-time"
          }
        },
        "description": "A conversion metric from standard to another with the contextual authority such as IATA, OAG, ISO, etc."
      },
      "Properties": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PropertiesID"
          },
          {
            "required": [
              "PropertyInfo"
            ],
            "properties": {
              "totalProperties": {
                "type": "integer",
                "description": "Total number or properties returned for the request",
                "format": "int32"
              },
              "propertiesPerPage": {
                "type": "integer",
                "description": "Number of properties per page",
                "format": "int32"
              },
              "PropertyInfo": {
                "maxItems": 1000,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PropertyInfo"
                }
              }
            }
          }
        ]
      },
      "PropertiesID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "PropertyInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PropertyInfoID"
          },
          {
            "required": [
              "Distance",
              "LowestAvailableRate",
              "Property"
            ],
            "properties": {
              "availability": {
                "$ref": "#/components/schemas/AvailabilityStatusEnum"
              },
              "Distance": {
                "$ref": "#/components/schemas/Distance"
              },
              "Property": {
                "$ref": "#/components/schemas/PropertyDetail"
              },
              "LowestAvailableRate": {
                "$ref": "#/components/schemas/CurrencyAmount"
              },
              "NextSteps": {
                "$ref": "#/components/schemas/NextSteps"
              },
              "featuredPropertyInd": {
                "type": "boolean",
                "description": "If present and true then this property was added to the list based on criteria other than those in the request"
              },
              "MaximumAvailableRate": {
                "$ref": "#/components/schemas/MaximumAvailableRate"
              }
            }
          }
        ]
      },
      "PropertyInfoID": {
        "properties": {
          "@type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        }
      },
      "AvailabilityStatusEnum": {
        "type": "string",
        "description": "Identifies the availability status of an item.",
        "enum": [
          "Open",
          "Close",
          "ClosedOnArrival",
          "ClosedOnArrivalOnRequest",
          "OnRequest",
          "RemoveCloseOnly",
          "Other"
        ]
      },
      "Distance": {
        "properties": {
          "value": {
            "type": "number",
            "description": "When using distance as a property search parameter, the maximum distance is 25 regardless of unit of distance",
            "format": "int32",
            "example": 25
          },
          "unitOfDistance": {
            "$ref": "#/components/schemas/UnitOfDistanceEnum"
          }
        },
        "description": "A search radius"
      },
      "UnitOfDistanceEnum": {
        "type": "string",
        "description": "Miles, Kilometers, etc.",
        "enum": [
          "Miles",
          "Kilometers"
        ]
      },
      "PropertyDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Property"
          },
          {
            "properties": {
              "classTypeCode": {
                "pattern": "[0-9A-Z]{1,3}(\\.[A-Z]{3}(\\.X){0,1}){0,1}",
                "type": "string",
                "description": "The OTA code of the property detail"
              },
              "segmentCatagoryCode": {
                "pattern": "[0-9A-Z]{1,3}(\\.[A-Z]{3}(\\.X){0,1}){0,1}",
                "type": "string",
                "description": "Segment category code"
              },
              "locationCatagoryCode": {
                "pattern": "[0-9A-Z]{1,3}(\\.[A-Z]{3}(\\.X){0,1}){0,1}",
                "type": "string",
                "description": "Location category code"
              },
              "complimentaryParking": {
                "$ref": "#/components/schemas/YesNoUnknownEnum"
              },
              "Address": {
                "$ref": "#/components/schemas/Address"
              },
              "Telephone": {
                "maxItems": 5,
                "minItems": 1,
                "type": "array",
                "items": {
                  "maxLength": 128,
                  "type": "string"
                }
              },
              "PropertyAmenity": {
                "maxItems": 250,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PropertyAmenity"
                }
              },
              "PetPolicy": {
                "$ref": "#/components/schemas/PetPolicy"
              },
              "Restaurant": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Restaurant"
                }
              },
              "Attraction": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Attraction"
                }
              },
              "DrivingDirections": {
                "$ref": "#/components/schemas/TextFree"
              },
              "MeetingRooms": {
                "$ref": "#/components/schemas/MeetingRooms"
              },
              "VirtualTour": {
                "$ref": "#/components/schemas/VirtualTour"
              },
              "CheckInOutPolicy": {
                "$ref": "#/components/schemas/CheckInOutPolicy"
              }
            }
          }
        ]
      },
      "Property": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PropertyID"
          },
          {
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "maxLength": 128,
                "type": "string",
                "description": "The property name"
              },
              "Rating": {
                "maxItems": 5,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Rating"
                }
              },
              "GeoLocation": {
                "$ref": "#/components/schemas/GeoLocation"
              },
              "Image": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Image"
                }
              },
              "Description": {
                "maxItems": 5,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "BusinessService": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Service"
                }
              },
              "AccessibilityFeature": {
                "maxItems": 25,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OTA_CodeWithDescription"
                }
              },
              "GuestRoomInfo": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GuestRoomInfo"
                }
              }
            }
          }
        ]
      },
      "PropertyID": {
        "required": [
          "@type",
          "PropertyKey"
        ],
        "properties": {
          "@type": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "Local reference id."
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          },
          "PropertyKey": {
            "$ref": "#/components/schemas/PropertyKey"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "PropertyKey": {
        "required": [
          "chainCode",
          "propertyCode"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "default": "PropertyKey"
          },
          "chainCode": {
            "maxLength": 5,
            "minLength": 2,
            "pattern": "([a-zA-Z0-9]{2,5})",
            "type": "string",
            "description": "Chain code for the property.",
            "example": "HL"
          },
          "propertyCode": {
            "maxLength": 32,
            "type": "string",
            "description": "Code for the property within the hotel chain."
          }
        }
      },
      "Rating": {
        "properties": {
          "value": {
            "type": "number",
            "description": "Rating used to classify hotels according to the quality",
            "format": "float",
            "example": 5
          },
          "provider": {
            "maxLength": 32,
            "type": "string",
            "description": "The provider who has granted the quality rating",
            "example": "AA"
          }
        },
        "description": "The actual award or rating received by the facility."
      },
      "GeoLocation": {
        "required": [
          "latitude",
          "longitude"
        ],
        "properties": {
          "latitude": {
            "type": "number",
            "description": "The measure of the angular distance on a meridan north or south equator",
            "format": "double",
            "example": 38.8951
          },
          "longitude": {
            "type": "number",
            "description": "The measure of the angular distance on a meridan east or west equator",
            "format": "double",
            "example": -77.0364
          },
          "altitude": {
            "type": "number",
            "description": "The height or an item, typically measured above sea level",
            "format": "float",
            "example": 5280
          },
          "altitudeUnitOfDistance": {
            "$ref": "#/components/schemas/UnitOfDistanceEnum"
          },
          "positionAccuracy": {
            "$ref": "#/components/schemas/PositionAccuracyEnum"
          },
          "mapURL": {
            "type": "string",
            "description": "link for embedded map showing location",
            "example": "www.destinationmap.com"
          },
          "formatURL": {
            "type": "string",
            "description": "The URL to the format for the latitude and longitude for this location.",
            "example": "www.destinationmap.com"
          }
        },
        "description": "Used to specify the geographic coordinates of a location"
      },
      "PositionAccuracyEnum": {
        "type": "string",
        "description": "Specifies the level of accuracy for the position",
        "enum": [
          "Zip9Code",
          "Zip7Code",
          "Zip5Code",
          "Street",
          "State",
          "Property",
          "Intersection",
          "Exact",
          "County",
          "City",
          "Block"
        ]
      },
      "Image": {
        "properties": {
          "value": {
            "type": "string"
          },
          "dimensionCategory": {
            "maxLength": 1,
            "type": "string",
            "description": "Deprecated and replaced by Image Size"
          },
          "width": {
            "type": "integer",
            "description": "Width of image",
            "format": "int32",
            "example": 42
          },
          "height": {
            "type": "integer",
            "description": "Height",
            "format": "int32",
            "example": 43
          },
          "caption": {
            "maxLength": 128,
            "type": "string",
            "description": "Image title",
            "example": "Ticket"
          },
          "pictureCategory": {
            "type": "integer",
            "description": "deprecated and replaced by pictureOf",
            "format": "int32",
            "example": 5
          },
          "imageSize": {
            "$ref": "#/components/schemas/ImageSizeEnum"
          },
          "pictureOf": {
            "$ref": "#/components/schemas/PictureofEnum"
          }
        },
        "description": "URL of the image"
      },
      "PictureofEnum": {
        "type": "string",
        "example": "Lobby",
        "enum": [
          "Exterior",
          "Lobby",
          "Pool",
          "Restaurant",
          "HealthClub",
          "GuestRoom",
          "Suite",
          "ConferenceRoom",
          "Ballroom",
          "Golf",
          "Beach",
          "Spa",
          "Bar",
          "Recreational",
          "RoomAmenity",
          "PopertyAmenity",
          "BusinessCentre"
        ]
      },
      "Service": {
        "properties": {
          "code": {
            "pattern": "[0-9A-Z]{1,3}(\\.[A-Z]{3}(\\.X){0,1}){0,1}",
            "type": "string",
            "description": "OTA code for this service type."
          },
          "description": {
            "maxLength": 128,
            "type": "string",
            "description": "Description of the service"
          },
          "proximityCode": {
            "pattern": "[0-9A-Z]{1,3}(\\.[A-Z]{3}(\\.X){0,1}){0,1}",
            "type": "string",
            "description": "Proximity code"
          },
          "existsInd": {
            "type": "boolean",
            "description": "If present and true this service exists"
          },
          "includedInd": {
            "type": "boolean",
            "description": "If present and true this service is included with no charge"
          }
        },
        "description": "A business service offered by the property"
      },
      "OTA_CodeWithDescription": {
        "properties": {
          "value": {
            "pattern": "[0-9A-Z]{1,3}(\\.[A-Z]{3}(\\.X){0,1}){0,1}",
            "type": "string"
          },
          "description": {
            "maxLength": 128,
            "type": "string",
            "description": "OTA code description"
          }
        },
        "description": "code"
      },
      "GuestRoomInfo": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "GuestRoomInfo"
          },
          "code": {
            "pattern": "[0-9A-Z]{1,3}(\\.[A-Z]{3}(\\.X){0,1}){0,1}",
            "type": "string",
            "description": "OTA code for this room type."
          },
          "number": {
            "type": "integer",
            "description": "Number of guest rooms with the guest room code.",
            "format": "int32"
          },
          "description": {
            "maxLength": 128,
            "type": "string",
            "description": "description of the guest room code."
          }
        }
      },
      "YesNoUnknownEnum": {
        "type": "string",
        "description": "Yes , No , Unknown",
        "enum": [
          "Yes",
          "No",
          "Unknown"
        ]
      },
      "Address": {
        "required": [
          "@type",
          "City"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "AddressDetail"
          },
          "id": {
            "type": "string",
            "description": "Internally referenced id",
            "example": "Address_1"
          },
          "BldgRoom": {
            "$ref": "#/components/schemas/AddressBldgRoom"
          },
          "Number": {
            "$ref": "#/components/schemas/AddressStreetNumber"
          },
          "Street": {
            "maxLength": 128,
            "type": "string",
            "description": "May contain the street number when the Street number element is missing.",
            "example": "ABC Street"
          },
          "AddressLine": {
            "maxItems": 3,
            "type": "array",
            "description": "Additional address line details",
            "example": "S Havana,Opposite to USPS",
            "items": {
              "maxLength": 128,
              "type": "string"
            }
          },
          "City": {
            "maxLength": 128,
            "type": "string",
            "description": "City (e.g., Dublin), town, or postal station (i.e., a postal service territory, often used in a military address).",
            "example": "Windsor"
          },
          "County": {
            "maxLength": 128,
            "type": "string",
            "description": "County or Region Name (e.g., Fairfax).",
            "example": "Berkshire"
          },
          "StateProv": {
            "$ref": "#/components/schemas/StateProv"
          },
          "Country": {
            "$ref": "#/components/schemas/Country"
          },
          "PostalCode": {
            "maxLength": 128,
            "type": "string",
            "description": "Post Office Code number.",
            "example": "Sl6 1AB"
          },
          "Addressee": {
            "maxLength": 37,
            "type": "string",
            "description": "The name of the company or person to be addressed"
          },
          "role": {
            "$ref": "#/components/schemas/Enum_AddressRole"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "AddressBldgRoom": {
        "properties": {
          "value": {
            "maxLength": 128,
            "type": "string",
            "example": "Moore House, Room 101, 23 ABC Street, Windsor, Berkshire, United Kingdom, SL6 51A"
          },
          "buldingInd": {
            "type": "boolean",
            "description": "When true, the information is a building name. When false, it is an apartment or room #",
            "example": true
          }
        },
        "description": "Address with building and room number"
      },
      "AddressStreetNumber": {
        "properties": {
          "value": {
            "maxLength": 128,
            "type": "string",
            "example": "23B ABC Street, Windsor, Berkshire, United Kingdom, SL6 51A"
          },
          "streetNmbrSuffix": {
            "maxLength": 32,
            "type": "string",
            "description": "Street Number Suffix",
            "example": "B"
          },
          "streetDirection": {
            "maxLength": 32,
            "type": "string",
            "description": "Dircetion of the Street",
            "example": "NW"
          },
          "ruralRouteNmbr": {
            "pattern": "[0-9]{1,5}",
            "type": "string",
            "description": "RuralRoute Number",
            "example": "76"
          },
          "po_Box": {
            "maxLength": 128,
            "type": "string",
            "description": "PO Box Number",
            "example": "1001"
          }
        },
        "description": "The street number alone is the numerical number that precedes the street name in the address"
      },
      "StateProv": {
        "properties": {
          "value": {
            "maxLength": 8,
            "minLength": 2,
            "type": "string",
            "example": "CA"
          },
          "name": {
            "maxLength": 512,
            "type": "string",
            "description": "State,province or region name or code needed to identify location",
            "example": "California"
          }
        },
        "description": "The standard code or abbreviation for the state, province, or region with optional name"
      },
      "Country": {
        "properties": {
          "value": {
            "pattern": "[a-zA-Z]{2}",
            "type": "string",
            "example": "USA"
          },
          "id": {
            "type": "string",
            "description": "Use this id to internally identify this country in NextSteps",
            "example": "23"
          },
          "name": {
            "maxLength": 128,
            "type": "string",
            "description": "The name or code of a country",
            "example": "United States"
          },
          "codeContext": {
            "maxLength": 32,
            "type": "string",
            "description": "The source of a code",
            "example": "IATA"
          }
        },
        "description": "ISO 3166 code for a country with optional name"
      },
      "Enum_AddressRole": {
        "type": "string",
        "example": "Delivery",
        "enum": [
          "Home",
          "Business",
          "Mailing",
          "Delivery",
          "Destination",
          "Other",
          "Billing"
        ]
      },
      "PropertyAmenity": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "PropertyAmenity"
          },
          "description": {
            "maxLength": 512,
            "type": "string",
            "description": "Type of amenity."
          },
          "location": {
            "maxLength": 32,
            "type": "string",
            "description": "Location of the property"
          },
          "Name": {
            "maxLength": 32,
            "type": "string",
            "description": "Name of the property"
          },
          "OperationTimes": {
            "$ref": "#/components/schemas/OperationTimes"
          },
          "Inclusion": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "maxLength": 32,
              "type": "string"
            }
          },
          "includedInd": {
            "type": "boolean",
            "description": "To represent if the Amenity is included in the rate"
          },
          "surchargeInd": {
            "type": "boolean",
            "description": "To represent if the Amenity attracts a surcharge"
          },
          "code": {
            "pattern": "[0-9A-Z]{1,3}(\\\\.[A-Z]{3}(\\\\.X){0,1}){0,1}",
            "type": "string",
            "description": "OTA code used to describe the property amenity."
          }
        }
      },
      "OperationTimes": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "OperationTimes"
          },
          "daysOfWeek": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DayOfWeekEnum"
            }
          },
          "openTime": {
            "type": "string",
            "example": "45900"
          },
          "closeTime": {
            "type": "string",
            "example": "06:00:00"
          }
        }
      },
      "DayOfWeekEnum": {
        "type": "string",
        "description": "The names of the days of the week.",
        "enum": [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday"
        ]
      },
      "PetPolicy": {
        "required": [
          "allowed"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "PetPolicy"
          },
          "allowed": {
            "$ref": "#/components/schemas/YesNoUnknownEnum"
          },
          "policyCode": {
            "pattern": "[0-9A-Z]{1,3}(\\.[A-Z]{3}(\\.X){0,1}){0,1}",
            "type": "string",
            "description": "Pet policy code"
          },
          "Description": {
            "$ref": "#/components/schemas/TextTitleAndDescription"
          }
        }
      },
      "TextTitleAndDescription": {
        "properties": {
          "value": {
            "maxLength": 4096,
            "type": "string",
            "example": "Ticket exchanged"
          },
          "languages": {
            "type": "array",
            "description": "Language of the text",
            "items": {
              "type": "string",
              "example": "English"
            }
          },
          "title": {
            "maxLength": 512,
            "type": "string",
            "description": "Title of the Text",
            "example": "Group details."
          }
        },
        "description": "Descriptive text"
      },
      "Restaurant": {
        "required": [
          "name"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "Restaurant"
          },
          "name": {
            "maxLength": 128,
            "type": "string",
            "description": "The name of the restaurant"
          },
          "cuisineCodes": {
            "type": "array",
            "description": "An OTA code to define the cuisine type",
            "example": 12,
            "items": {
              "pattern": "[0-9A-Z]{1,3}(\\.[A-Z]{3}(\\.X){0,1}){0,1}",
              "type": "string"
            }
          },
          "proximityCode": {
            "pattern": "[0-9A-Z]{1,3}(\\.[A-Z]{3}(\\.X){0,1}){0,1}",
            "type": "string",
            "description": "An OTA proximity code"
          },
          "Distance": {
            "$ref": "#/components/schemas/Distance"
          }
        }
      },
      "Attraction": {
        "required": [
          "name"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "Attraction"
          },
          "name": {
            "maxLength": 128,
            "type": "string",
            "description": "The name of the attraction"
          },
          "Distance": {
            "$ref": "#/components/schemas/Distance"
          }
        }
      },
      "TextFree": {
        "properties": {
          "value": {
            "maxLength": 4096,
            "type": "string",
            "example": "Additional information"
          },
          "language": {
            "type": "string",
            "description": "Language of the text.",
            "example": "English"
          }
        },
        "description": "Textual information to provide descriptions and\\/or additional information."
      },
      "MeetingRooms": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "MeetingRooms"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "MeetingRoom": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MeetingRoom"
            }
          }
        }
      },
      "MeetingRoom": {
        "required": [
          "name"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "MeetingRoom"
          },
          "name": {
            "maxLength": 128,
            "type": "string",
            "description": "The name of the meeting room"
          },
          "codes": {
            "type": "array",
            "description": "OTA code for this room type.",
            "items": {
              "pattern": "[0-9A-Z]{1,3}(\\.[A-Z]{3}(\\.X){0,1}){0,1}",
              "type": "string"
            }
          },
          "capacity": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "unitOfSize": {
            "$ref": "#/components/schemas/UnitOfSize"
          }
        }
      },
      "UnitOfSize": {
        "type": "string",
        "description": "List of units of size i.e Square Feet, Square Meters",
        "enum": [
          "Square Feet",
          "Square Meters"
        ]
      },
      "VirtualTour": {
        "required": [
          "url"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "VirtualTour"
          },
          "url": {
            "type": "string"
          },
          "Description": {
            "$ref": "#/components/schemas/TextFree"
          }
        }
      },
      "CheckInOutPolicy": {
        "required": [
          "checkInTime",
          "checkOutTime"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "CheckInOutPolicy"
          },
          "checkInTime": {
            "pattern": "(([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)((:?)[0-5]\\d)?([\\.,]\\d+(?!:))?",
            "type": "string",
            "description": "Check-in time"
          },
          "checkOutTime": {
            "pattern": "(([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)((:?)[0-5]\\d)?([\\.,]\\d+(?!:))?",
            "type": "string",
            "description": "Check-out time"
          },
          "minimumAge": {
            "type": "integer",
            "description": "Minimum age of guest checking in or out",
            "format": "int32"
          },
          "Description": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextTitleAndDescription"
            }
          }
        }
      },
      "CurrencyAmount": {
        "properties": {
          "value": {
            "type": "number",
            "format": "float",
            "example": 124.56
          },
          "code": {
            "pattern": "[a-zA-Z]{3}",
            "type": "string",
            "description": "An ISO 4217 alpha character code that specifies a money unit",
            "example": "USD"
          },
          "minorUnit": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "pattern": "([0-4])",
            "type": "integer",
            "description": "Minor units are a mechanism for expressing the relationship between a major currency unit and its corresponding minor currency unit.",
            "format": "int32",
            "example": 2
          },
          "currencySource": {
            "$ref": "#/components/schemas/CurrencySourceEnum"
          },
          "approximateInd": {
            "type": "boolean",
            "description": "True if the currency amount has been converted from the original amount",
            "example": true
          }
        },
        "description": "A monetary amount, up to 4 decimal places. Decimal place needs to be included."
      },
      "CurrencySourceEnum": {
        "type": "string",
        "description": "The system requesting or returning the currency code specified in the attribute",
        "enum": [
          "Supplier",
          "Charged",
          "Requested"
        ]
      },
      "MaximumAvailableRate": {
        "properties": {
          "value": {
            "type": "number",
            "format": "float",
            "example": 124.56
          },
          "code": {
            "pattern": "[a-zA-Z]{3}",
            "type": "string",
            "description": "An ISO 4217 alpha character code that specifies a money unit",
            "example": "USD"
          },
          "minorUnit": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "pattern": "([0-4])",
            "type": "integer",
            "description": "Minor units are a mechanism for expressing the relationship between a major currency unit and its corresponding minor currency unit.",
            "format": "int32",
            "example": 2
          },
          "authority": {
            "maxLength": 128,
            "type": "string",
            "description": "Name of the authoritative system that provided this rate",
            "example": "EXPE"
          }
        },
        "description": "Maximum Available Rate for this Property, including the authority who provided the rate if it is different from the PropertyInfo authority."
      },
      "ErrorResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "PropertiesQuerySearchWrapper": {
        "properties": {
          "PropertiesQuerySearch": {
            "$ref": "#/components/schemas/PropertiesQuerySearch"
          }
        }
      },
      "PropertiesQuerySearch": {
        "required": [
          "@type",
          "CheckInDate",
          "CheckOutDate",
          "SearchBy"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "PropertiesQuerySearch"
          },
          "SortOrder": {
            "$ref": "#/components/schemas/HotelSortOrderEnum"
          },
          "CheckInDate": {
            "type": "string",
            "description": "Check In Date",
            "format": "date"
          },
          "CheckOutDate": {
            "type": "string",
            "description": "Check Out Date",
            "format": "date"
          },
          "ChainCodes": {
            "type": "array",
            "description": "The permitted property chain code(s) to be returned for this request",
            "items": {
              "maxLength": 5,
              "minLength": 2,
              "pattern": "([a-zA-Z0-9]{2,5})",
              "type": "string"
            }
          },
          "HotelName": {
            "maxLength": 512,
            "type": "string",
            "description": "The preferred name of the property"
          },
          "RequestedCurrency": {
            "pattern": "[a-zA-Z]{3}",
            "type": "string",
            "description": "You can use requested currency to request conversion rate information. The response will return the currencyRateConversion object which will contain conversion rate of the requested currency."
          },
          "ImageSize": {
            "$ref": "#/components/schemas/ImageSizeEnum"
          },
          "RoomStayCandidate": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoomStayCandidate"
            }
          },
          "RateCandidates": {
            "$ref": "#/components/schemas/RateCandidates"
          },
          "SearchBy": {
            "$ref": "#/components/schemas/SearchBy"
          },
          "returnAllImagesInd": {
            "type": "boolean",
            "description": "If true, all property images of the size requested will be returned. If blank or false the best single property image will be returned."
          },
          "PropertyAmenityCode": {
            "type": "array",
            "items": {
              "maxLength": 5,
              "minLength": 2,
              "pattern": "([a-zA-Z0-9]{2,5})",
              "type": "string"
            }
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "HotelSortOrderEnum": {
        "type": "string",
        "description": "The method to be used in sorting hotel properties",
        "enum": [
          "StarRating",
          "Proximity"
        ]
      },
      "RoomStayCandidate": {
        "required": [
          "GuestCounts"
        ],
        "properties": {
          "GuestCounts": {
            "$ref": "#/components/schemas/GuestCounts"
          },
          "RoomAmenity": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoomAmenity"
            }
          }
        }
      },
      "GuestCounts": {
        "required": [
          "GuestCount"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "GuestCounts"
          },
          "GuestCount": {
            "maxItems": 99,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GuestCount"
            }
          }
        }
      },
      "GuestCount": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "GuestCount"
          },
          "age": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "The age of the guest",
            "format": "int32",
            "example": 21
          },
          "count": {
            "type": "integer",
            "description": "The number of guests in one AgeQualifyingCode or Count.",
            "format": "int32",
            "example": 2
          },
          "ageQualifyingCode": {
            "maxLength": 32,
            "type": "string",
            "description": "Enter 10 for an adult or 08 for a child",
            "example": "10"
          }
        }
      },
      "RoomAmenity": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "RoomAmenity"
          },
          "description": {
            "maxLength": 512,
            "type": "string",
            "description": "description of the room amenity",
            "example": "WiFi"
          },
          "quantity": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "quantity of amenity",
            "format": "int32"
          },
          "Name": {
            "maxLength": 32,
            "type": "string",
            "description": "Room Amenity Name",
            "example": "24 hour Room Service"
          },
          "Inclusion": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "maxLength": 32,
              "type": "string"
            }
          },
          "includedInd": {
            "type": "boolean",
            "description": "To represent if the Amenity is included in the rate"
          },
          "surchargeInd": {
            "type": "boolean",
            "description": "To represent if the Amenity attracts a surcharge"
          },
          "code": {
            "pattern": "[0-9A-Z]{1,3}(\\\\.[A-Z]{3}(\\\\.X){0,1}){0,1}",
            "type": "string",
            "description": "OTA code used to describe the room amenity. This is optional in the Properties Search request but mandatory in the response"
          }
        }
      },
      "RateCandidates": {
        "required": [
          "@type",
          "RateCandidate"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "RateCandidates"
          },
          "RateCandidate": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RateCandidate"
            }
          },
          "prePayRatesOnlyInd": {
            "type": "boolean",
            "description": "If true, only prepay rates will be returned"
          },
          "postPayRatesOnlyInd": {
            "type": "boolean",
            "description": "If true, only postpay rates will be returned"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "RateCandidate": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "RateCandidate"
          },
          "priority": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "rate candidate priority",
            "format": "int32"
          },
          "rateCode": {
            "maxLength": 32,
            "type": "string",
            "description": "The rateCode to be applied to the request",
            "example": "HL123"
          },
          "rateCategory": {
            "$ref": "#/components/schemas/RateCategoryEnum"
          },
          "chainCode": {
            "maxLength": 5,
            "minLength": 2,
            "pattern": "([a-zA-Z0-9]{2,5})",
            "type": "string",
            "description": "The hotel chain code",
            "example": "HL"
          },
          "propertyCode": {
            "maxLength": 32,
            "type": "string",
            "description": "The hotel chain code",
            "example": "HL12345"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "RateCategoryEnum": {
        "type": "string",
        "description": "Rate Category",
        "enum": [
          "All",
          "Association",
          "Business",
          "BusinessStandard",
          "Club",
          "Convention",
          "Corporate",
          "Consortiums",
          "Discount",
          "Credential",
          "Employee",
          "FamilyPlan",
          "FullInclusive",
          "Government",
          "Inclusive",
          "Industry/TravelAgentRate",
          "Leisure",
          "Military",
          "Monthly",
          "Multi-DayPackage",
          "MultLevel/Negotiated/Secure",
          "Other",
          "Package",
          "PrePaid",
          "Promotional",
          "RackGeneral",
          "SeniorCitizen",
          "Standard",
          "Tour",
          "VIP",
          "Weekend",
          "Weekly"
        ]
      },
      "SearchBy": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "SearchBy"
          },
          "SearchRadius": {
            "$ref": "#/components/schemas/Distance"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "PropertiesQueryPrecisionSearchWrapper": {
        "properties": {
          "PropertiesQuerySearch": {
            "$ref": "#/components/schemas/PropertiesQueryPrecisionSearch"
          }
        }
      },
      "PropertiesQueryPrecisionSearch": {
        "properties": {
          "MealsIncluded": {
            "$ref": "#/components/schemas/MealsIncluded"
          },
          "RefundableInd": {
            "type": "boolean",
            "description": "If true, return Properties with at least one refundable rate."
          },
          "CommissionableInd": {
            "type": "boolean",
            "description": "If true, return Properties with at least one commissionable rate."
          },
          "SmokingInd": {
            "type": "boolean",
            "description": "If true, return Properties with at least one rate for a smoking room."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PropertiesQuerySearch"
          }
        ]
      },
      "MealsIncluded": {
        "properties": {
          "breakfastInd": {
            "type": "boolean"
          },
          "lunchInd": {
            "type": "boolean"
          },
          "dinnerInd": {
            "type": "boolean"
          }
        },
        "description": "Indicates if a meal is included"
      },
      "PropertiesQuerySpecificPropertyListWrapper": {
        "properties": {
          "PropertiesQuerySpecificPropertyList": {
            "$ref": "#/components/schemas/PropertiesQuerySpecificPropertyList"
          }
        }
      },
      "PropertiesQuerySpecificPropertyList": {
        "required": [
          "@type",
          "PropertyKey",
          "checkinDate",
          "checkoutDate",
          "numberOfGuests"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "PropertiesQuerySpecificPropertyList"
          },
          "checkinDate": {
            "type": "string",
            "description": "Checkin date",
            "format": "date"
          },
          "checkoutDate": {
            "type": "string",
            "description": "Checkout date",
            "format": "date"
          },
          "numberOfGuests": {
            "type": "integer",
            "description": "Number of travelers. Must be a numeric value between 1 and 9.",
            "format": "int32"
          },
          "requestedCurrency": {
            "pattern": "[a-zA-Z]{3}",
            "type": "string",
            "description": "You can use requested currency to request conversion rate information. The response will return the currencyRateConversion object which will contain conversion rate of the requested currency."
          },
          "minimumRate": {
            "type": "number",
            "description": "Minimum rate",
            "format": "float"
          },
          "maximumRate": {
            "type": "number",
            "description": "Maximum rate",
            "format": "float"
          },
          "numberOfRooms": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "Number of rooms",
            "format": "int32"
          },
          "PropertyKey": {
            "maxItems": 250,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyKey"
            }
          },
          "RateCandidates": {
            "$ref": "#/components/schemas/RateCandidates"
          },
          "imageSize": {
            "$ref": "#/components/schemas/ImageSizeEnum"
          },
          "RoomStayCandidates": {
            "$ref": "#/components/schemas/RoomStayCandidates"
          },
          "returnAllImagesInd": {
            "type": "boolean",
            "description": "If true, all property images of the size requested will be returned. If blank or false the best single property image will be returned."
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "RoomStayCandidates": {
        "required": [
          "RoomStayCandidate"
        ],
        "properties": {
          "RoomStayCandidate": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoomStayCandidate"
            }
          }
        }
      },
      "PropertiesQuerySpecificPrecisionPropertyListWrapper": {
        "properties": {
          "PropertiesQuerySpecificPrecisionPropertyList": {
            "$ref": "#/components/schemas/PropertiesQuerySpecificPrecisionPropertyList"
          }
        }
      },
      "PropertiesQuerySpecificPrecisionPropertyList": {
        "properties": {
          "MealsIncluded": {
            "$ref": "#/components/schemas/MealsIncluded"
          },
          "RefundableInd": {
            "type": "boolean",
            "description": "If true, return Properties with at least one refundable rate."
          },
          "CommissionableInd": {
            "type": "boolean",
            "description": "If true, return Properties with at least one commissionable rate."
          },
          "SmokingInd": {
            "type": "boolean",
            "description": "If true, return Properties with at least one rate for a smoking room."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PropertiesQuerySpecificPropertyList"
          }
        ]
      },
      "CatalogOfferingsQueryRequestHospitalityWrapper": {
        "properties": {
          "CatalogOfferingsQueryRequest": {
            "$ref": "#/components/schemas/CatalogOfferingsQueryRequest"
          }
        }
      },
      "CatalogOfferingsQueryRequest": {
        "required": [
          "@type",
          "CatalogOfferingsRequest"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "CatalogOfferingsRequestHospitality"
          },
          "CatalogOfferingsRequest": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogOfferingsRequestHospitality"
            }
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "CatalogOfferingsRequestHospitality": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CatalogOfferingsRequest"
          },
          {
            "required": [
              "StayDates"
            ],
            "properties": {
              "requestedCurrency": {
                "pattern": "[a-zA-Z]{3}",
                "type": "string",
                "description": "You can use requested currency to request conversion rate information. The response will return the currencyRateConversion object which will contain conversion rate of the requested currency."
              },
              "maxResponseWaitTime": {
                "type": "integer",
                "description": "Maximum time (in milliseconds) to wait for provider responses before returning a response to the consumer of this service",
                "format": "int32"
              },
              "StayDates": {
                "$ref": "#/components/schemas/DateOrDateWindows"
              },
              "HotelSearchCriterion": {
                "$ref": "#/components/schemas/HotelSearchCriterion"
              },
              "MinimumAmount": {
                "$ref": "#/components/schemas/CurrencyAmount"
              },
              "MaximumAmount": {
                "$ref": "#/components/schemas/CurrencyAmount"
              },
              "verboseResponseInd": {
                "type": "boolean",
                "description": "Used to specify that a verbose response is to be returned.  Verbose responses repeat the Property information in each Product and do not return the reference list."
              }
            }
          }
        ]
      },
      "CatalogOfferingsRequest": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "CatalogOfferingsRequestHospitality"
          },
          "SearchControlConsoleChannelID": {
            "$ref": "#/components/schemas/SearchControlConsoleChannelID"
          }
        }
      },
      "SearchControlConsoleChannelID": {
        "properties": {
          "value": {
            "maxLength": 32,
            "type": "string",
            "example": "2"
          },
          "sccType": {
            "maxLength": 32,
            "type": "string",
            "description": "Assigned Type: c-1100:StringTiny"
          }
        }
      },
      "DateOrDateWindows": {
        "properties": {
          "specific": {
            "type": "string",
            "description": "A specific date. When used with a windows must fall between start and end.",
            "format": "date",
            "example": "2023-03-03"
          },
          "start": {
            "type": "string",
            "description": "The earliest and latest dates acceptable for the start date.",
            "format": "date",
            "example": "2023-03-03"
          },
          "end": {
            "type": "string",
            "description": "The earliest and latest dates acceptable for the end date.",
            "format": "date",
            "example": "2023-03-03"
          },
          "duration": {
            "type": "string",
            "description": "Duration from  start date.",
            "example": "P1D"
          },
          "durationUnit": {
            "$ref": "#/components/schemas/DurationUnitEnum"
          }
        },
        "description": "Indicates the expiry date."
      },
      "DurationUnitEnum": {
        "type": "string",
        "description": "Defines the Units that can be applied to Stay restrictions.",
        "enum": [
          "Minutes",
          "Hours",
          "Days",
          "Months",
          "MON",
          "TUES",
          "WED",
          "THU",
          "FRI",
          "SAT",
          "SUN"
        ]
      },
      "HotelSearchCriterion": {
        "required": [
          "PropertyRequest"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "HotelSearchCriterion"
          },
          "numberOfRooms": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "Number of rooms requested",
            "format": "int32"
          },
          "PropertyRequest": {
            "maxItems": 100,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyRequest"
            }
          },
          "RoomStayCandidates": {
            "$ref": "#/components/schemas/RoomStayCandidates"
          },
          "RateCandidates": {
            "$ref": "#/components/schemas/RateCandidates"
          }
        }
      },
      "PropertyRequest": {
        "required": [
          "PropertyKey"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "PropertyRequest"
          },
          "moreRatesToken": {
            "maxLength": 512,
            "type": "string",
            "description": "More rates token"
          },
          "PropertyKey": {
            "$ref": "#/components/schemas/PropertyKey"
          }
        }
      },
      "CatalogOfferingsHospitalityResponseWrapper": {
        "properties": {
          "CatalogOfferingsHospitalityResponse": {
            "$ref": "#/components/schemas/CatalogOfferingsHospitalityResponse"
          }
        }
      },
      "CatalogOfferingsHospitalityResponse": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "CatalogOfferingsHospitalityResponse"
          },
          "CatalogOfferings": {
            "$ref": "#/components/schemas/CatalogOfferings"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "CatalogOfferings": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CatalogOfferingsID"
          },
          {
            "required": [
              "CatalogOffering"
            ],
            "properties": {
              "CatalogOffering": {
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CatalogOffering"
                }
              },
              "AncillaryOffering": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AncillaryOfferingID"
                }
              }
            }
          }
        ]
      },
      "CatalogOfferingsID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "CatalogOfferings"
          },
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object.",
            "example": "CatalogOfferings_1"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "CatalogOffering": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CatalogOfferingID"
          },
          {
            "required": [
              "Price",
              "ProductOptions"
            ],
            "properties": {
              "ProductOptions": {
                "maxItems": 10,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductOptions"
                }
              },
              "Price": {
                "$ref": "#/components/schemas/PriceDetail"
              },
              "TermsAndConditions": {
                "$ref": "#/components/schemas/TermsAndConditions"
              }
            }
          }
        ]
      },
      "CatalogOfferingID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "CatalogOffering"
          },
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object.",
            "example": "co1"
          },
          "CatalogOfferingRef": {
            "type": "string",
            "description": "Used to reference another instance of this object in the same message",
            "example": "co1"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "ProductOptions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProductOptionsID"
          },
          {
            "required": [
              "Product"
            ],
            "properties": {
              "sequence": {
                "minimum": 0,
                "exclusiveMinimum": false,
                "type": "integer",
                "description": "NonnegativeInteger",
                "format": "int32",
                "example": 1
              },
              "Product": {
                "maxItems": 1000,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductID"
                }
              }
            }
          }
        ]
      },
      "ProductOptionsID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "default": "ProductOptions"
          },
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object.",
            "example": "ProductOptions_1"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          },
          "ProductOptionsRef": {
            "type": "string",
            "description": "Used to reference another instance of this object in the same message",
            "example": "ProductOptions_1"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "ProductID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "ProductAir"
          },
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object.",
            "example": "product_1"
          },
          "productRef": {
            "type": "string",
            "description": "Used to reference another instance of this object in the same message",
            "example": "product_1"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "PriceDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Price"
          },
          {
            "properties": {
              "PriceBreakdown": {
                "maxItems": 50,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PriceBreakdown"
                }
              }
            }
          }
        ]
      },
      "Price": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "PriceDetail"
          },
          "id": {
            "type": "string",
            "description": "Internally referenced id",
            "example": "2"
          },
          "CurrencyCode": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "Base": {
            "type": "number",
            "description": "The total amount not including taxes and\\/or fees",
            "format": "float",
            "example": 20.2
          },
          "TotalTaxes": {
            "type": "number",
            "description": "The total of the taxes included in the total price",
            "format": "float",
            "example": 34.4
          },
          "TotalFees": {
            "type": "number",
            "description": "The total of the fees included in the total price",
            "format": "float",
            "example": 201
          },
          "TotalPrice": {
            "type": "number",
            "description": "The total price of the product in the currency indicated",
            "format": "float",
            "example": 34
          },
          "VendorCurrencyTotal": {
            "$ref": "#/components/schemas/VendorCurrencyTotal"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "VendorCurrencyTotal": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "VendorCurrencyTotal"
          },
          "currencySource": {
            "$ref": "#/components/schemas/CurrencySourceEnum"
          },
          "CurrencyCode": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "Base": {
            "type": "number",
            "description": "The price prior to all applicable taxes of a product such as the rate for a room or fare for a flight.",
            "format": "float",
            "example": 120.2
          },
          "Taxes": {
            "$ref": "#/components/schemas/Taxes"
          },
          "Fees": {
            "$ref": "#/components/schemas/Fees"
          },
          "Total": {
            "type": "number",
            "description": "Specifies the total price including base + taxes + fees",
            "format": "float",
            "example": 30.13
          },
          "approximateInd": {
            "type": "boolean",
            "description": "True if this amount has been converted from the original amount",
            "example": true
          }
        }
      },
      "Taxes": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "TaxesDetail"
          },
          "TotalTaxes": {
            "type": "number",
            "description": "A monetary amount, up to 4 decimal places. Decimal place needs to be included.",
            "format": "float",
            "example": 330.1
          },
          "TaxInfo": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxInfo"
            }
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "TaxInfo": {
        "required": [
          "Amount",
          "TaxBreakdown",
          "TaxCode"
        ],
        "properties": {
          "TaxCode": {
            "type": "string",
            "description": "The tax code",
            "example": "XF"
          },
          "CurrencyCode": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "Amount": {
            "type": "number",
            "description": "The amount of the tax applied",
            "format": "float"
          },
          "TaxBreakdown": {
            "maxItems": 20,
            "type": "array",
            "description": "The breakdown of the tax for this tax code",
            "items": {
              "$ref": "#/components/schemas/TaxBreakdown"
            }
          }
        }
      },
      "TaxBreakdown": {
        "required": [
          "AirportCode"
        ],
        "properties": {
          "AirportCode": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "([a-zA-Z]{3})",
            "type": "string",
            "description": "The airport location the tax applies to",
            "example": "MIA"
          },
          "CurrencyCode": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "Amount": {
            "type": "number",
            "description": "The amount of the tax applied",
            "format": "float"
          }
        }
      },
      "Fees": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "FeesDetail"
          },
          "TotalFees": {
            "type": "number",
            "description": "A monetary amount, up to 4 decimal places. Decimal place needs to be included.",
            "format": "float",
            "example": 111.11
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "PriceBreakdown": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "PriceBreakdownAir"
          },
          "Amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "Commission": {
            "$ref": "#/components/schemas/Commission"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "Amount": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "Amount"
          },
          "currencySource": {
            "$ref": "#/components/schemas/CurrencySourceEnum"
          },
          "CurrencyCode": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "Base": {
            "type": "number",
            "description": "The price prior to all applicable taxes of a product such as the rate for a room or fare for a flight.",
            "format": "float",
            "example": 120.2
          },
          "Taxes": {
            "$ref": "#/components/schemas/Taxes"
          },
          "Fees": {
            "$ref": "#/components/schemas/Fees"
          },
          "Total": {
            "type": "number",
            "description": "Specifies the total price including base + taxes + fees",
            "format": "float",
            "example": 30.13
          },
          "approximateInd": {
            "type": "boolean",
            "description": "True if this amount has been converted from the original amount",
            "example": true
          }
        }
      },
      "Commission": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "Commission"
          },
          "application": {
            "$ref": "#/components/schemas/CommissionEnum"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "CommissionEnum": {
        "type": "string",
        "description": "Type of commission",
        "enum": [
          "Full",
          "Partial",
          "Non-paying",
          "No-show",
          "Adjustment",
          "Commissionable"
        ]
      },
      "TermsAndConditions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TermsAndConditionsID"
          },
          {
            "properties": {
              "ExpiryDate": {
                "type": "string",
                "description": "The data and time the offer will expire",
                "format": "date-time"
              },
              "CustomerLoyalty": {
                "maxItems": 5,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomerLoyalty"
                }
              }
            }
          }
        ]
      },
      "TermsAndConditionsID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "TermsAndConditionsAir"
          },
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object.",
            "example": "TC_1"
          },
          "termsAndConditionsRef": {
            "type": "string",
            "description": "Used to reference another instance of this object in the same message.",
            "example": "TC_1"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "CustomerLoyalty": {
        "properties": {
          "value": {
            "maxLength": 1000,
            "minLength": 1,
            "type": "string",
            "example": "132456"
          },
          "id": {
            "type": "string",
            "description": "Customer Loyality Id",
            "example": "Loyalty_1"
          },
          "priority": {
            "maximum": 300,
            "exclusiveMaximum": false,
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "Numeric Priority Code",
            "format": "int32",
            "example": 2
          },
          "programId": {
            "maxLength": 128,
            "type": "string",
            "description": "Specifies an identifier to indicate the company owner of the loyalty program",
            "example": "United"
          },
          "programName": {
            "maxLength": 128,
            "type": "string",
            "description": "Supplier's loyalty program name such as Frontier-EarlyReturns",
            "example": "Mileage Plus"
          },
          "supplierType": {
            "maxLength": 32,
            "type": "string",
            "description": "The kind of supplier of a loyalty program",
            "example": "Airline"
          },
          "supplier": {
            "maxLength": 128,
            "type": "string",
            "description": "Supplier of a loyalty program",
            "example": "UA"
          },
          "tier": {
            "maxLength": 32,
            "type": "string",
            "description": "Customer Loyalty tier level",
            "example": "Silver"
          },
          "shareWithSupplier": {
            "type": "array",
            "description": "The list of suppliers that the CustomerLoyalty number is shared.",
            "items": {
              "maxLength": 32,
              "type": "string",
              "example": "LH NH SQ"
            }
          },
          "cardHolderName": {
            "maxLength": 128,
            "type": "string",
            "description": "The card holder name",
            "example": "John Smith"
          },
          "validatedInd": {
            "type": "boolean",
            "description": "Customer loyalty number has been validated by the supplier",
            "example": true
          }
        },
        "description": "Specifies the ID for the membership program."
      },
      "AncillaryOfferingID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "AncillaryOffering"
          },
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object."
          },
          "CatalogOfferingRef": {
            "type": "string",
            "description": "Used to reference another instance of this object in the same message"
          },
          "AncillaryOfferingRef": {
            "type": "string"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "CatalogOfferingsQueryBuildFromPropertiesWrapper": {
        "properties": {
          "CatalogOfferingsQueryBuildFromProperties": {
            "$ref": "#/components/schemas/CatalogOfferingsQueryBuildFromProperties"
          }
        }
      },
      "CatalogOfferingsQueryBuildFromProperties": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "default": "CatalogOfferingsQueryBuildFromProperties"
          },
          "BuildFromCatalogOfferingHospitality": {
            "$ref": "#/components/schemas/BuildFromProperties"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "BuildFromProperties": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "BuildFromProperties"
          },
          "PropertiesIdentifier": {
            "$ref": "#/components/schemas/Identifier"
          },
          "PropertInfoIds": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "An array of propertyInfoID",
              "example": "ON-60106"
            }
          }
        }
      },
      "OfferQueryBuildFromCatalogOfferingWrapper": {
        "properties": {
          "OfferQueryBuildFromCatalogOffering": {
            "$ref": "#/components/schemas/OfferQueryBuildFromCatalogOffering"
          }
        }
      },
      "OfferQueryBuildFromCatalogOffering": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "OfferQueryBuildFromCatalogOffering"
          },
          "BuildFromCatalogOfferingHospitality": {
            "$ref": "#/components/schemas/BuildFromCatalogOfferingHospitality"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "BuildFromCatalogOfferingHospitality": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "BuildFromCatalogOfferingHospitality"
          },
          "CatalogOfferingIdentifier": {
            "$ref": "#/components/schemas/Identifier"
          },
          "NumberOfRooms": {
            "type": "integer",
            "description": "Number of rooms required.",
            "format": "int32",
            "example": 1
          }
        }
      },
      "OfferHospitalityResponseWrapper": {
        "properties": {
          "OfferHospitalityResponse": {
            "$ref": "#/components/schemas/OfferHospitalityResponse"
          }
        }
      },
      "OfferHospitalityResponse": {
        "properties": {
          "Offer": {
            "$ref": "#/components/schemas/Offer"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "Offer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OfferID"
          },
          {
            "required": [
              "Price",
              "Product",
              "TermsAndConditionsFull"
            ],
            "properties": {
              "parentOfferRef": {
                "type": "string",
                "description": "A reference to the Offer this offer is sold in conjunction with",
                "example": "offer_1"
              },
              "Product": {
                "maxItems": 100,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductID"
                }
              },
              "Price": {
                "$ref": "#/components/schemas/Price"
              },
              "TermsAndConditionsFull": {
                "maxItems": 100,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TermsAndConditionsFull"
                }
              },
              "passiveOfferInd": {
                "type": "boolean",
                "description": "If true, the Offer is passive for booking purposes.",
                "example": true
              }
            }
          }
        ]
      },
      "OfferID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "Offer"
          },
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object.",
            "example": "offer_1"
          },
          "offerRef": {
            "type": "string",
            "description": "Used to reference another instance of this object in the same message",
            "example": "offer_1"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "TermsAndConditionsFull": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TermsAndConditionsFullID"
          },
          {
            "properties": {
              "ExpiryDate": {
                "type": "string",
                "description": "The data and time the offer will expire",
                "format": "date-time"
              },
              "CustomerLoyalty": {
                "maxItems": 5,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomerLoyalty"
                }
              },
              "TextBlock": {
                "maxItems": 50,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TextBlock"
                }
              }
            }
          }
        ]
      },
      "TermsAndConditionsFullID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "TermsAndConditionsFullAir"
          },
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object.",
            "example": "TC_1"
          },
          "termsAndConditionsRef": {
            "type": "string",
            "description": "Used to reference another instance of this object in the same message.",
            "example": "TC_1"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "TextBlock": {
        "required": [
          "@type",
          "TextFormatted"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "TextBlockDetail"
          },
          "title": {
            "maxLength": 512,
            "type": "string",
            "description": "Title",
            "example": "Baggage Details"
          },
          "id": {
            "type": "string",
            "description": "Internally referenced id",
            "example": "2"
          },
          "TextFormatted": {
            "maxItems": 50,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextFormatted"
            }
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "TextFormatted": {
        "properties": {
          "value": {
            "maxLength": 4096,
            "type": "string",
            "example": "Formatted text"
          },
          "language": {
            "type": "string",
            "description": "The language in which the text is provided.",
            "example": "English"
          },
          "textFormat": {
            "$ref": "#/components/schemas/TextFormatEnum"
          }
        },
        "description": "Provides text and indicates whether it is formatted or not."
      },
      "TextFormatEnum": {
        "type": "string",
        "description": "Describes the format of text such as plain text or html",
        "enum": [
          "PlainText",
          "HTML"
        ]
      },
      "OfferQueryHospitalityRequestWrapper": {
        "properties": {
          "OfferQueryHospitalityRequest": {
            "$ref": "#/components/schemas/OfferQueryHospitalityRequest"
          }
        }
      },
      "OfferQueryHospitalityRequest": {
        "required": [
          "@type",
          "PropertyKey",
          "checkinDate",
          "checkoutDate",
          "numberOfGuests"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "OfferQueryHospitalityRequest"
          },
          "checkinDate": {
            "type": "string",
            "format": "date"
          },
          "checkoutDate": {
            "type": "string",
            "format": "date"
          },
          "numberOfGuests": {
            "type": "integer",
            "description": "The number of guests",
            "format": "int32"
          },
          "bookingCode": {
            "maxLength": 32,
            "type": "string",
            "description": "The booking code"
          },
          "storedCurrency": {
            "pattern": "[a-zA-Z]{3}",
            "type": "string",
            "description": "stored currency"
          },
          "storedAmount": {
            "type": "number",
            "description": "stored amount",
            "format": "float"
          },
          "requestedCurrency": {
            "pattern": "[a-zA-Z]{3}",
            "type": "string",
            "description": "You can use requested currency to request conversion rate information. The response will return the currencyRateConversion object which will contain conversion rate of the requested currency."
          },
          "RoomStayCandidates": {
            "$ref": "#/components/schemas/RoomStayCandidates"
          },
          "PropertyKey": {
            "$ref": "#/components/schemas/PropertyKey"
          },
          "HotelAggregator": {
            "$ref": "#/components/schemas/HotelAggregatorEnum"
          },
          "RateCandidate": {
            "$ref": "#/components/schemas/RateCandidate"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "HotelAggregatorEnum": {
        "type": "string",
        "enum": [
          "Travelport",
          "Agoda",
          "Booking",
          "Expedia",
          "Bonotel"
        ]
      },
      "OfferQueryBuildFromCatalogOfferingsHospitalityWrapper": {
        "properties": {
          "OfferQueryBuildFromCatalogOfferingsHospitality": {
            "$ref": "#/components/schemas/OfferQueryBuildFromCatalogOfferingsHospitality"
          }
        }
      },
      "OfferQueryBuildFromCatalogOfferingsHospitality": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "OfferQueryBuildFromCatalogOfferingsHospitality"
          },
          "BuildFromCatalogOfferingsRequest": {
            "$ref": "#/components/schemas/BuildFromCatalogOfferingsRequest"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "BuildFromCatalogOfferingsRequest": {
        "required": [
          "@type",
          "CatalogOfferingIdentifier",
          "CatalogOfferingsIdentifier",
          "ProductIdentifier"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "BuildFromCatalogOfferingsRequestAir"
          },
          "CatalogOfferingsIdentifier": {
            "$ref": "#/components/schemas/CatalogOfferingsIdentifier"
          },
          "CatalogOfferingIdentifier": {
            "$ref": "#/components/schemas/CatalogOfferingIdentifier"
          },
          "ProductIdentifier": {
            "maxItems": 10,
            "minItems": 1,
            "type": "array",
            "example": "p1",
            "items": {
              "$ref": "#/components/schemas/ProductIdentifier"
            }
          },
          "AncillaryOfferingIdentifier": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AncillaryOfferingIdentifier"
            }
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "CatalogOfferingsIdentifier": {
        "properties": {
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object.",
            "example": "CatalogOfferings_1"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        }
      },
      "CatalogOfferingIdentifier": {
        "properties": {
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object.",
            "example": "co1"
          },
          "CatalogOfferingRef": {
            "type": "string",
            "description": "Used to reference another instance of this object in the same message",
            "example": "co1"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        }
      },
      "ProductIdentifier": {
        "properties": {
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object.",
            "example": "product_1"
          },
          "productRef": {
            "type": "string",
            "description": "Used to reference another instance of this object in the same message",
            "example": "product_1"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        }
      },
      "AncillaryOfferingIdentifier": {
        "properties": {
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object.",
            "example": "AN1"
          },
          "CatalogOfferingRef": {
            "type": "string",
            "description": "Used to reference another instance of this object in the same message",
            "example": "CO1"
          },
          "AncillaryOfferingRef": {
            "type": "string",
            "example": "AN1"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        }
      },
      "ReservationResponseWrapper": {
        "properties": {
          "ReservationResponse": {
            "$ref": "#/components/schemas/ReservationResponse"
          }
        }
      },
      "ReservationResponse": {
        "properties": {
          "Reservation": {
            "$ref": "#/components/schemas/ReservationID"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "ReservationID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "Reservation"
          },
          "id": {
            "type": "string",
            "description": "Internal ID",
            "example": "REF12873"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "ReservationQueryBuildWrapper": {
        "properties": {
          "ReservationQueryBuild": {
            "$ref": "#/components/schemas/ReservationQueryBuild"
          }
        }
      },
      "ReservationQueryBuild": {
        "required": [
          "@type",
          "ReservationBuild"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "default": "ReservationQueryBuild"
          },
          "ReservationBuild": {
            "$ref": "#/components/schemas/ReservationBuild"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "ReservationBuild": {
        "required": [
          "@type",
          "Traveler"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "ReservationBuildFromCatalogOfferings"
          },
          "Traveler": {
            "maxItems": 9,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TravelerID"
            }
          },
          "FormOfPayment": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormOfPaymentID"
            }
          },
          "Payment": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentID"
            }
          },
          "ReservationComment": {
            "maxItems": 1000,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationCommentID"
            }
          },
          "PrimaryContact": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrimaryContactID"
            }
          },
          "SpecialService": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpecialServiceID"
            }
          },
          "Accounting": {
            "$ref": "#/components/schemas/AccountingID"
          },
          "DocumentOverrides": {
            "maxItems": 5,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentOverridesID"
            }
          },
          "Preference": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PreferenceID"
            }
          },
          "ReceiptConfirmation": {
            "$ref": "#/components/schemas/ReceiptConfirmation"
          },
          "TravelAgency": {
            "$ref": "#/components/schemas/TravelAgency"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "TravelerID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "TravelerDetail"
          },
          "id": {
            "type": "string"
          },
          "TravelerRef": {
            "type": "string"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "FormOfPaymentID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "FormOfPaymentPaymentCard"
          },
          "id": {
            "type": "string"
          },
          "FormOfPaymentRef": {
            "type": "string"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "PaymentID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "Payment",
            "default": "Payment"
          },
          "id": {
            "type": "string"
          },
          "PaymentRef": {
            "type": "string"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "ReservationCommentID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "ReservationComment"
          },
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object."
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "PrimaryContactID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "PrimaryContact"
          },
          "id": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "SpecialServiceID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "SpecialService"
          },
          "id": {
            "type": "string",
            "description": "Internal Id"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "AccountingID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "Accounting"
          },
          "id": {
            "type": "string"
          },
          "AccountingRef": {
            "type": "string",
            "description": "Accounting reference"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "DocumentOverridesID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "DocumentOverrides"
          },
          "id": {
            "type": "string",
            "description": "The reporting number."
          },
          "DocumentOverridesRef": {
            "type": "string"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "PreferenceID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "Preference"
          },
          "id": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "ReceiptConfirmation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Receipt"
          },
          {
            "properties": {
              "Confirmation": {
                "$ref": "#/components/schemas/Confirmation"
              },
              "SegmentSequenceList": {
                "type": "array",
                "description": "The segmentSequenceList the ReceiptConfirmation applies to",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        ]
      },
      "Receipt": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReceiptID"
          },
          {
            "properties": {
              "dateTime": {
                "type": "string",
                "description": "Receipt date time",
                "format": "date-time"
              },
              "OfferRef": {
                "type": "array",
                "description": "List of offers which links with the receipt",
                "items": {
                  "type": "string"
                }
              },
              "ProductRef": {
                "type": "string",
                "description": "Reference of product"
              }
            }
          }
        ]
      },
      "ReceiptID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "ReceiptConfirmation"
          },
          "id": {
            "type": "string",
            "description": "The verification number.",
            "example": "3493289238"
          },
          "ReceiptRef": {
            "type": "string",
            "example": "6773 2389 2239 2832"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "Confirmation": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "ConfirmationHold"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "TravelAgency": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TravelAgencyID"
          },
          {
            "required": [
              "OrganizationName"
            ],
            "properties": {
              "organizationType": {
                "$ref": "#/components/schemas/OrganizationTypeEnum"
              },
              "OrganizationName": {
                "$ref": "#/components/schemas/CompanyName"
              },
              "CorporateCode": {
                "maxLength": 32,
                "type": "string",
                "description": "A reference assigned by the Travel Agency to identify the corporate organization",
                "example": "Air Agency"
              },
              "ProfileName": {
                "maxItems": 200,
                "type": "array",
                "items": {
                  "maxLength": 64,
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "TravelAgencyID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "TravelAgencyDetail"
          },
          "id": {
            "type": "string",
            "description": "Simple xsd id, not for external use",
            "example": "2"
          },
          "TravelOrganizationRef": {
            "type": "string",
            "description": "An organization that has a name and a structure and members and directly works in the travel industry",
            "example": "TravelAgency_1"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "OrganizationTypeEnum": {
        "type": "string",
        "description": "The type of organization such as an Agency, Branch, Company, Supplier, Provider",
        "enum": [
          "TravelAgency",
          "AgencyBranch",
          "LoyaltyProgram",
          "IdDocumentIssuer",
          "TravelSupplier",
          "TravelProvider",
          "Regulatory"
        ]
      },
      "CompanyName": {
        "properties": {
          "value": {
            "maxLength": 128,
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "Use this id to internally identify this company in NextSteps",
            "example": "2"
          },
          "division": {
            "maxLength": 32,
            "type": "string",
            "description": "The division name or ID with which the contact is associated",
            "example": "Travel Division"
          },
          "department": {
            "maxLength": 32,
            "type": "string",
            "description": "The department name or ID with which the contact is associated",
            "example": "Adventure department"
          },
          "shortName": {
            "maxLength": 32,
            "type": "string",
            "description": "Used to provide the company common name",
            "example": "Aventure Inc"
          },
          "code": {
            "maxLength": 32,
            "type": "string",
            "description": "Identifies a company by the company code",
            "example": "AI"
          },
          "codeContext": {
            "maxLength": 32,
            "type": "string",
            "description": "Identifies the context of the identifying code,such as DUNS,IATA or internal code",
            "example": "ISO"
          },
          "systemOfRecord": {
            "type": "array",
            "description": "The system(s) that maintain the data",
            "items": {
              "maxLength": 5,
              "minLength": 2,
              "pattern": "([a-zA-Z0-9]{2,5})",
              "type": "string",
              "example": "[\"1G\",\"1V\",\"MB\",\"HZ\"]"
            }
          }
        },
        "description": "Identifies a company by name."
      },
      "IdentifierTypeENUM": {
        "type": "string",
        "example": "Locator",
        "enum": [
          "Reservation",
          "Locator",
          "SupplierLocator",
          "DocumentNumber"
        ]
      },
      "ReservationDetailWrapper": {
        "properties": {
          "ReservationDetail": {
            "$ref": "#/components/schemas/ReservationDetail"
          }
        }
      },
      "ReservationDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Reservation"
          },
          {
            "properties": {
              "Accounting": {
                "$ref": "#/components/schemas/Accounting"
              },
              "DocumentOverrides": {
                "maxItems": 5,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DocumentOverrides"
                }
              }
            }
          }
        ]
      },
      "Reservation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReservationID"
          },
          {
            "properties": {
              "Offer": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Offer"
                }
              },
              "Traveler": {
                "maxItems": 300,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Traveler"
                }
              },
              "TravelerProduct": {
                "maxItems": 3000,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TravelerProduct"
                }
              },
              "FormOfPayment": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FormOfPaymentID"
                }
              },
              "Payment": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "Receipt": {
                "maxItems": 1000,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Receipt"
                }
              },
              "OfferLink": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OfferLink"
                }
              },
              "ReservationComment": {
                "maxItems": 1000,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReservationComment"
                }
              },
              "PrimaryContact": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PrimaryContact"
                }
              },
              "TravelAgency": {
                "$ref": "#/components/schemas/TravelAgency"
              },
              "GroupName": {
                "maxLength": 64,
                "type": "string",
                "description": "A name assigned to a Reservation containing an offer with Passengerflight/Flight Quantity equal to or greater than 10"
              },
              "SpecialService": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SpecialService"
                }
              },
              "Preference": {
                "$ref": "#/components/schemas/Preference"
              },
              "OrganizationLoyaltyProgram": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrganizationLoyaltyProgram"
                }
              },
              "ShoppingCart": {
                "$ref": "#/components/schemas/ShoppingCart"
              },
              "ReservationDisplaySequence": {
                "$ref": "#/components/schemas/ReservationDisplaySequence"
              },
              "AgencyServiceFee": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AgencyServiceFee"
                }
              },
              "autoDeleteDate": {
                "type": "string",
                "description": "The auto delete date represents the date that the Reservation will be kept active. Also known as retention segment or retention date.",
                "format": "date"
              },
              "notificationDate": {
                "type": "string",
                "description": "The notification date represents the date that the Reservation should be reviewed. Also known as ticket time limit date.",
                "format": "date"
              }
            }
          }
        ]
      },
      "Traveler": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TravelerID"
          },
          {
            "required": [
              "PersonName"
            ],
            "properties": {
              "birthDate": {
                "type": "string",
                "description": "Date of Birth YYYY-MM-DD",
                "format": "date",
                "example": "2021-06-05"
              },
              "gender": {
                "$ref": "#/components/schemas/GenderEnum"
              },
              "PersonName": {
                "$ref": "#/components/schemas/PersonName"
              },
              "Address": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Address"
                }
              },
              "Telephone": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Telephone"
                }
              },
              "Email": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Email"
                }
              },
              "passengerTypeCode": {
                "maxLength": 5,
                "minLength": 3,
                "pattern": "([a-zA-Z0-9]{3,5})",
                "type": "string",
                "description": "Passenger type code",
                "example": "CHD"
              },
              "nationality": {
                "pattern": "[a-zA-Z]{2}",
                "type": "string",
                "description": "Nationality on country code ISO",
                "example": "AL"
              },
              "CustomerLoyalty": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomerLoyalty"
                }
              },
              "AlternateContact": {
                "maxItems": 20,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AlternateContact"
                }
              },
              "TravelDocument": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TravelDocument"
                }
              },
              "Comments": {
                "$ref": "#/components/schemas/Comments"
              },
              "RailDiscountCard": {
                "maxItems": 50,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RailDiscountCard"
                }
              },
              "accompaniedByInfantInd": {
                "type": "boolean",
                "example": true
              }
            }
          }
        ]
      },
      "GenderEnum": {
        "type": "string",
        "description": "Gender Type Male, Female etc. This field is not used by Hotel APIs and will be ignored",
        "enum": [
          "Male",
          "Female",
          "Unknown",
          "Undisclosed"
        ]
      },
      "PersonName": {
        "required": [
          "@type",
          "Surname"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "PersonNameDetail"
          },
          "Prefix": {
            "maxLength": 10,
            "type": "string",
            "description": "Salutation of honorific (e.g. Mr., Mrs., Ms., Miss, Dr.)",
            "example": "Mr"
          },
          "Given": {
            "maxLength": 30,
            "type": "string",
            "description": "Given name, first name or names.",
            "example": "John"
          },
          "Middle": {
            "maxLength": 30,
            "type": "string",
            "description": "The middle name of the person name.",
            "example": "Erick"
          },
          "Surname": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string",
            "description": "Family name, last name.",
            "example": "Smith"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "Telephone": {
        "required": [
          "@type",
          "phoneNumber"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "Telephone"
          },
          "countryAccessCode": {
            "pattern": "[0-9]{1,3}",
            "type": "string",
            "description": "TelephoneCountry AccessCode",
            "example": "1"
          },
          "areaCityCode": {
            "pattern": "[0-9]{1,8}",
            "type": "string",
            "description": "Telephone Area CityCode",
            "example": "972"
          },
          "phoneNumber": {
            "maxLength": 32,
            "type": "string",
            "description": "Mobile/Telephone Number",
            "example": "972-000-787"
          },
          "extension": {
            "pattern": "[0-9]{0,5}",
            "type": "string",
            "description": "Telephone extension number",
            "example": "234"
          },
          "id": {
            "type": "string",
            "description": "UOptional internally referenced id",
            "example": "3"
          },
          "cityCode": {
            "maxLength": 10,
            "pattern": "([A-Z0-9]+)?",
            "type": "string",
            "description": "City Code",
            "example": "DEN"
          },
          "role": {
            "$ref": "#/components/schemas/Enum_TelephoneRole"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "Enum_TelephoneRole": {
        "type": "string",
        "example": "Mobile",
        "enum": [
          "Mobile",
          "Home",
          "Work",
          "Office",
          "Fax",
          "Other"
        ]
      },
      "Email": {
        "properties": {
          "value": {
            "maxLength": 128,
            "type": "string",
            "example": "exampledomain@example.com"
          },
          "id": {
            "type": "string",
            "description": "Electronic email addresses, in IETF specified format.",
            "example": "exampledomain@example.com"
          },
          "emailType": {
            "pattern": "[0-9A-Z]{1,3}(\\.[A-Z]{3}(\\.X){0,1}){0,1}",
            "type": "string",
            "description": "Type of the e-mail",
            "example": "Work"
          },
          "comment": {
            "maxLength": 4096,
            "type": "string",
            "description": "Assigned Type: c-1100:StringText"
          },
          "preferredFormat": {
            "maxLength": 32,
            "type": "string",
            "description": "Mime media type",
            "example": "text/html"
          },
          "shareMarketing": {
            "$ref": "#/components/schemas/YesNoInheritEnum"
          },
          "shareSync": {
            "$ref": "#/components/schemas/YesNoInheritEnum"
          },
          "optOutInd": {
            "$ref": "#/components/schemas/YesNoInheritEnum"
          },
          "optInStatus": {
            "$ref": "#/components/schemas/OptInStatusEnum"
          },
          "optInDate": {
            "type": "string",
            "description": "The datetime of receiving the opt in notice",
            "format": "date-time"
          },
          "optOutDate": {
            "type": "string",
            "description": "The datetime the opt out notice was received",
            "format": "date-time"
          },
          "validInd": {
            "type": "boolean",
            "description": "If true, this is a valid email address that has been system verified via a successful email transmission.",
            "example": true
          },
          "provisionedInd": {
            "type": "boolean",
            "description": "If true then the email address came from the provisioning process",
            "example": true
          }
        },
        "description": "Electronic email addresses, in IETF specified format."
      },
      "YesNoInheritEnum": {
        "type": "string",
        "description": "Used to indicate marketing preferences, Yes, No, Inherit",
        "enum": [
          "Yes",
          "No",
          "Inherit"
        ]
      },
      "OptInStatusEnum": {
        "type": "string",
        "description": "Used to indicate marketing preferences, OptIn, OptOut",
        "enum": [
          "OptedIn",
          "OptedOut",
          "Unknown"
        ]
      },
      "AlternateContact": {
        "required": [
          "PersonName"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "AlternateContact"
          },
          "id": {
            "type": "string"
          },
          "contactType": {
            "maxLength": 128,
            "type": "string",
            "description": "Contact type value",
            "example": "Relative"
          },
          "relation": {
            "maxLength": 128,
            "type": "string",
            "description": "Relation value",
            "example": "Mother"
          },
          "PersonName": {
            "$ref": "#/components/schemas/PersonName"
          },
          "Address": {
            "maxItems": 3,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          },
          "Telephone": {
            "maxItems": 5,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Telephone"
            }
          },
          "Email": {
            "maxItems": 5,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Email"
            }
          },
          "emergencyInd": {
            "type": "boolean",
            "description": "This is the contact in case of an emergency",
            "example": true
          },
          "defaultInd": {
            "type": "boolean",
            "description": "This is the default contact",
            "example": true
          }
        }
      },
      "TravelDocument": {
        "required": [
          "@type",
          "Gender",
          "PersonName",
          "docNumber"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "TravelDocumentDetail"
          },
          "docNumber": {
            "maxLength": 128,
            "type": "string",
            "description": "Document number value",
            "example": "B37201"
          },
          "docType": {
            "$ref": "#/components/schemas/DocTypeCodeEnum"
          },
          "issueDate": {
            "type": "string",
            "description": "Date of Issue",
            "format": "date",
            "example": "2002-10-13"
          },
          "expireDate": {
            "type": "string",
            "description": "Date of expiration",
            "format": "date",
            "example": "2002-11-13"
          },
          "stateProvCode": {
            "maxLength": 8,
            "minLength": 2,
            "type": "string",
            "description": "State Province Code value",
            "example": "44"
          },
          "placeOfIssue": {
            "maxLength": 32,
            "type": "string",
            "description": "Place of issue value",
            "example": "Birmingham"
          },
          "issueCountry": {
            "pattern": "[a-zA-Z]{2}",
            "type": "string",
            "description": "Issue country on Country Code ISO",
            "example": "CA"
          },
          "birthDate": {
            "type": "string",
            "description": "The date of birth of the document holder",
            "format": "date",
            "example": "1995-04-22"
          },
          "birthCountry": {
            "pattern": "[a-zA-Z]{2}",
            "type": "string",
            "description": "Birth country on Country Code ISO value",
            "example": "AR"
          },
          "birthPlace": {
            "maxLength": 128,
            "type": "string",
            "description": "Birth place value",
            "example": "Ontario"
          },
          "residence": {
            "maxLength": 512,
            "type": "string",
            "description": "Residence value",
            "example": "1st section 8th st"
          },
          "id": {
            "type": "string",
            "description": "Locally referenced id",
            "example": "34"
          },
          "Gender": {
            "$ref": "#/components/schemas/GenderEnum"
          },
          "Nationality": {
            "pattern": "[a-zA-Z]{2}",
            "type": "string",
            "description": "Specifies a 2 character country code as defined in ISO3166.",
            "example": "BR"
          },
          "PersonName": {
            "$ref": "#/components/schemas/PersonName"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "DocTypeCodeEnum": {
        "type": "string",
        "description": "Codes from OTA DOC - Document Type",
        "example": "Passport",
        "enum": [
          "Visa",
          "Passport",
          "MilitaryIdentification",
          "DriversLicense",
          "NationalIdentityDocument",
          "VaccinationCertificate",
          "AlienRegistrationNumber",
          "InsurancePolicyNumber",
          "TaxExemptionNumber",
          "VehicleRegistrationLicenseNumber",
          "BoderCrossingCard",
          "RefugeeTravelDocument",
          "PilotsLicense",
          "PermanentResidentCard",
          "RedressNumber",
          "KnownTravelerNumber",
          "Non-Standard",
          "MerchantNumber",
          "AirNexusCard",
          "CrewMemberCertificate",
          "PassportCard",
          "NaturalizationCertificate",
          "TicketNumber",
          "LargeFamilyDiscountCard"
        ]
      },
      "Comments": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "Comments"
          },
          "Comment": {
            "maxItems": 100,
            "type": "array",
            "example": [
              "check-in",
              "boarded"
            ],
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          }
        }
      },
      "Comment": {
        "properties": {
          "value": {
            "maxLength": 4096,
            "type": "string",
            "example": "Additional comments"
          },
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object.",
            "example": "comment_1"
          },
          "name": {
            "maxLength": 128,
            "type": "string",
            "description": "Title",
            "example": "Comment name"
          },
          "language": {
            "type": "string",
            "description": "Language code using ISO-639 standard",
            "example": "EN"
          }
        },
        "description": "Textual information."
      },
      "RailDiscountCard": {
        "required": [
          "supplierCode"
        ],
        "properties": {
          "value": {
            "maxLength": 128,
            "type": "string",
            "example": "20 Perecnt"
          },
          "supplierCode": {
            "maxLength": 5,
            "minLength": 2,
            "pattern": "([a-zA-Z0-9]{2,5})",
            "type": "string",
            "description": "Code of the Supplier",
            "example": "Enco"
          },
          "referenceNumber": {
            "maxLength": 128,
            "type": "string",
            "description": "ReferenceNumber",
            "example": "134256"
          }
        },
        "description": "The name of the Rail Discount"
      },
      "TravelerProduct": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TravelerProductID"
          },
          {
            "properties": {
              "TravelerRef": {
                "type": "string",
                "description": "A pointer to the traveler id"
              },
              "OfferRef": {
                "type": "string",
                "description": "A pointer to the Offer id"
              },
              "ProductRef": {
                "type": "string",
                "description": "A pointer to the product id"
              },
              "ConfirmationStatusEnum": {
                "$ref": "#/components/schemas/ConfirmationStatusEnum"
              }
            }
          }
        ]
      },
      "TravelerProductID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "TravelerProduct"
          },
          "id": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "ConfirmationStatusEnum": {
        "type": "string",
        "description": "Status returned in a response for a two or more phase commitment process",
        "enum": [
          "Pending",
          "Confirmed",
          "Cancelled",
          "Rejected"
        ]
      },
      "Payment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentID"
          },
          {
            "required": [
              "Amount"
            ],
            "properties": {
              "Amount": {
                "$ref": "#/components/schemas/CurrencyAmount"
              },
              "FormOfPaymentIdentifier": {
                "$ref": "#/components/schemas/FormOfPaymentIdentifier"
              },
              "OfferIdentifier": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OfferIdentifier"
                }
              },
              "Fees": {
                "$ref": "#/components/schemas/Fees"
              },
              "Taxes": {
                "$ref": "#/components/schemas/Taxes"
              },
              "TravelerIdentifierRef": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TravelerIdentifierRef"
                }
              },
              "BaseAmount": {
                "$ref": "#/components/schemas/CurrencyAmount"
              },
              "depositInd": {
                "type": "boolean",
                "description": "If true, the payment is a deposit on the referenced Offer"
              },
              "ExtendedPayment": {
                "$ref": "#/components/schemas/ExtendedPayment"
              },
              "AgencyServiceFeeIdentifier": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AgencyServiceFeeIdentifier"
                }
              },
              "guaranteeInd": {
                "type": "boolean",
                "description": "If true, the payment is a guarantee for the referenced Offer"
              }
            }
          }
        ]
      },
      "FormOfPaymentIdentifier": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "FormOfPaymentPaymentCash"
          },
          "id": {
            "type": "string"
          },
          "FormOfPaymentRef": {
            "type": "string"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        }
      },
      "OfferIdentifier": {
        "properties": {
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object.",
            "example": "offer_1"
          },
          "offerRef": {
            "type": "string",
            "description": "Used to reference another instance of this object in the same message",
            "example": "offer_1"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        }
      },
      "TravelerIdentifierRef": {
        "properties": {
          "name": {
            "maxLength": 512,
            "type": "string",
            "description": "Traveler identifier"
          },
          "passengerTypeCode": {
            "maxLength": 5,
            "minLength": 3,
            "pattern": "([a-zA-Z0-9]{3,5})",
            "type": "string",
            "description": "Passenger Type code",
            "example": "ADT"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentifierRef"
          }
        ]
      },
      "IdentifierRef": {
        "properties": {
          "value": {
            "maxLength": 128,
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "A locally referenced ID"
          },
          "description": {
            "type": "string",
            "description": "Descriptive text used to identify the contents of a target object"
          },
          "uris": {
            "type": "array",
            "description": "Uniform Resource Identifier",
            "items": {
              "type": "string",
              "example": "google.com"
            }
          }
        }
      },
      "ExtendedPayment": {
        "required": [
          "NumberOfInstallments"
        ],
        "properties": {
          "NumberOfInstallments": {
            "type": "integer",
            "description": "The number of installment payments to be charged by the payment card provider",
            "format": "int32",
            "example": 6
          },
          "FirstInstallment": {
            "type": "number",
            "description": "For Pagos Parceledos, specify the first installment amount. This will be the same currency as the payment",
            "format": "float",
            "example": 100
          },
          "RemainingAmount": {
            "type": "number",
            "description": "For Pagos Parceledos, specify the remaining amount to be charged that will be spread across the number of installments. This will be the same currency as the payment",
            "format": "float",
            "example": 50
          },
          "OTATOCode": {
            "maxLength": 32,
            "type": "string",
            "description": "For Pagos Parceledos the OTATOCode"
          }
        },
        "description": "Note this field is deprecated in Payment schema and should be passed in FormOfPaymentPaymentCardExtendPayment schema"
      },
      "AgencyServiceFeeIdentifier": {
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique id for this object within a message"
          }
        }
      },
      "OfferLink": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "OfferLink"
          },
          "OfferRef": {
            "type": "string"
          },
          "ParentOffer": {
            "$ref": "#/components/schemas/ParentOffer"
          }
        }
      },
      "ParentOffer": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "ParentOffer"
          },
          "OfferRef": {
            "type": "string"
          },
          "ProductRef": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "ReservationComment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReservationCommentID"
          },
          {
            "properties": {
              "commentSource": {
                "$ref": "#/components/schemas/CommentSourceEnum"
              },
              "shareWith": {
                "$ref": "#/components/schemas/ShareWithEnum"
              },
              "shareWithSupplier": {
                "type": "array",
                "description": "Reservation comment shared with supplier",
                "items": {
                  "maxLength": 32,
                  "type": "string"
                }
              },
              "Comment": {
                "maxItems": 1000,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Comment"
                }
              },
              "AppliesTo": {
                "maxItems": 1000,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AppliesTo"
                }
              }
            }
          }
        ]
      },
      "CommentSourceEnum": {
        "type": "string",
        "enum": [
          "Agency",
          "Supplier",
          "Traveler"
        ]
      },
      "ShareWithEnum": {
        "type": "string",
        "description": "Share with like Supplier,agency etc",
        "enum": [
          "Supplier",
          "Agency",
          "Traveler"
        ]
      },
      "AppliesTo": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "AppliesToOffer"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "PrimaryContact": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PrimaryContactID"
          },
          {
            "properties": {
              "shareWith": {
                "$ref": "#/components/schemas/ShareWithEnum"
              },
              "shareWithSupplier": {
                "type": "array",
                "description": "Primary contact shared with supplier",
                "items": {
                  "maxLength": 32,
                  "type": "string"
                }
              },
              "Email": {
                "$ref": "#/components/schemas/Email"
              },
              "Telephone": {
                "$ref": "#/components/schemas/Telephone"
              },
              "TravelerIdentifier": {
                "$ref": "#/components/schemas/TravelerIdentifier"
              },
              "contactInformationRefusedInd": {
                "type": "boolean",
                "description": "If true, the passenger has refused to provide emergency contact details",
                "example": true
              }
            }
          }
        ]
      },
      "TravelerIdentifier": {
        "properties": {
          "id": {
            "type": "string"
          },
          "TravelerRef": {
            "type": "string"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        }
      },
      "SpecialService": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SpecialServiceID"
          },
          {
            "properties": {
              "AppliesTo": {
                "$ref": "#/components/schemas/AppliesTo"
              },
              "Status": {
                "$ref": "#/components/schemas/Status"
              },
              "ServiceAnimalType": {
                "maxLength": 32,
                "type": "string",
                "description": "The type of service animal accompanying the Traveler. If no service animal leave blank."
              },
              "TravelerIdentifier": {
                "$ref": "#/components/schemas/TravelerIdentifier"
              }
            }
          }
        ]
      },
      "Status": {
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ConfirmationStatusEnum"
          },
          "supplierText": {
            "maxLength": 128,
            "type": "string",
            "description": "Supplier status text",
            "example": "Active/In-active"
          }
        }
      },
      "Preference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PreferenceID"
          },
          {
            "properties": {
              "AppliesTo": {
                "$ref": "#/components/schemas/AppliesTo"
              },
              "TravelerIdentifier": {
                "$ref": "#/components/schemas/TravelerIdentifier"
              }
            }
          }
        ]
      },
      "OrganizationLoyaltyProgram": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OrganizationLoyaltyProgramID"
          },
          {
            "required": [
              "LoyaltyIdentifier",
              "Supplier"
            ],
            "properties": {
              "Supplier": {
                "maxLength": 32,
                "type": "string",
                "description": "The supplier of the loyalty program",
                "example": "Air canada"
              },
              "LoyaltyIdentifier": {
                "maxLength": 1000,
                "minLength": 1,
                "type": "string",
                "description": "Loyalty Identifier",
                "example": "LP029381"
              }
            }
          }
        ]
      },
      "OrganizationLoyaltyProgramID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "OrganizationLoyaltyProgramID"
          },
          "id": {
            "type": "string"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "ShoppingCart": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "ShoppingCart"
          },
          "Product": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductAir"
            }
          }
        }
      },
      "ProductAir": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Product"
          },
          {
            "required": [
              "FlightSegment",
              "PassengerFlight"
            ],
            "properties": {
              "totalDuration": {
                "type": "string",
                "description": "Total duration of all Segments that are part of this ProductAir",
                "example": "3245"
              },
              "FlightSegment": {
                "maxItems": 99,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FlightSegment"
                }
              },
              "PassengerFlight": {
                "maxItems": 10,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PassengerFlight"
                }
              }
            }
          }
        ]
      },
      "Product": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProductID"
          },
          {
            "properties": {
              "Quantity": {
                "minimum": 0,
                "exclusiveMinimum": false,
                "type": "integer",
                "description": "The quantity of the product",
                "format": "int32",
                "example": 2
              }
            }
          }
        ]
      },
      "FlightSegment": {
        "required": [
          "Flight",
          "sequence"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "FlightSegment"
          },
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object.",
            "example": "2304"
          },
          "sequence": {
            "type": "integer",
            "description": "Segment sequence",
            "format": "int32",
            "example": 65
          },
          "connectionDuration": {
            "type": "string",
            "description": "The actual duration (in minutes) between",
            "example": "60"
          },
          "Flight": {
            "$ref": "#/components/schemas/FlightID"
          },
          "OperationalStatus": {
            "$ref": "#/components/schemas/OperationalStatusENUM"
          },
          "boundFlightsInd": {
            "type": "boolean",
            "description": "If present and true, the Segments in this Connection must be sold and cancelled together.",
            "example": true
          },
          "CO2Actual": {
            "$ref": "#/components/schemas/Measurement"
          }
        }
      },
      "FlightID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "FlightDetail"
          },
          "id": {
            "type": "string",
            "description": "Internal ID",
            "example": "126"
          },
          "FlightRef": {
            "type": "string",
            "description": "Reference to a Flight object eslewhere in the message",
            "example": "pln0845"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "OperationalStatusENUM": {
        "properties": {
          "value": {
            "$ref": "#/components/schemas/OperationalStatusENUM_Base"
          }
        }
      },
      "OperationalStatusENUM_Base": {
        "type": "string",
        "example": "FlightBoarding",
        "enum": [
          "FlightBoarding",
          "FlightCancelled",
          "FlightDeparted",
          "FlightPastScheduledDeparture",
          "NotAvailableUseSearch"
        ]
      },
      "Measurement": {
        "properties": {
          "value": {
            "type": "number",
            "format": "float",
            "example": 2.22
          },
          "measurementType": {
            "$ref": "#/components/schemas/MeasurementTypeEnum"
          },
          "unit": {
            "$ref": "#/components/schemas/UnitOfMeasureEnum"
          }
        },
        "description": "Used for dimensional units (width, height, depth) or weight"
      },
      "MeasurementTypeEnum": {
        "type": "string",
        "description": "The type of measurement such as width, height, weight",
        "enum": [
          "Width",
          "Height",
          "Depth",
          "Weight",
          "OverallDimension"
        ]
      },
      "UnitOfMeasureEnum": {
        "type": "string",
        "description": "The unit of measure in a code format. Refer to OpenTravel Code List Unit of Measure Code (UOM).",
        "enum": [
          "Miles",
          "Kilometers",
          "Meters",
          "Millimeters",
          "Centimeters",
          "Yards",
          "Feet",
          "Inches",
          "Pixels",
          "Block",
          "Megabytes",
          "Gigabytes",
          "Square feet",
          "Square meters",
          "Pounds",
          "Kilograms",
          "Square inch",
          "Square yard",
          "Acre",
          "Square millimeter",
          "Square centimeter",
          "Hectare",
          "Ounce",
          "Gram",
          "Gallons",
          "Liters",
          "Kilowatts",
          "Cubic meters"
        ]
      },
      "PassengerFlight": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "PassengerFlight"
          },
          "passengerQuantity": {
            "type": "integer",
            "description": "Number of passengers of the specified passenger type code",
            "format": "int32",
            "example": 416
          },
          "passengerTypeCode": {
            "maxLength": 5,
            "minLength": 3,
            "pattern": "([a-zA-Z0-9]{3,5})",
            "type": "string",
            "description": "Passenger type code",
            "example": "ADT"
          },
          "FlightProduct": {
            "maxItems": 99,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlightProduct"
            }
          }
        }
      },
      "FlightProduct": {
        "required": [
          "segmentSequence"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "FlightProduct"
          },
          "segmentSequence": {
            "type": "array",
            "description": "The Segment sequence",
            "example": [
              23,
              45,
              67,
              89
            ],
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "classOfService": {
            "maxLength": 2,
            "minLength": 1,
            "pattern": "([a-zA-Z0-9]{1,2})",
            "type": "string",
            "description": "The class of service",
            "example": "F"
          },
          "cabin": {
            "$ref": "#/components/schemas/CabinAirEnum"
          },
          "fareBasisCode": {
            "maxLength": 32,
            "type": "string",
            "description": "Fare basis code",
            "example": "HKG  SU  X/MOW  SU  KGD  598.78"
          },
          "fareType": {
            "$ref": "#/components/schemas/FareTypeEnum"
          },
          "carCode": {
            "maxLength": 32,
            "type": "string",
            "description": "The car code",
            "example": "P1234"
          },
          "valueCode": {
            "maxLength": 32,
            "type": "string",
            "description": "The value code",
            "example": "365"
          },
          "Brand": {
            "$ref": "#/components/schemas/BrandID"
          },
          "CustomerLoyaltyCredit": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerLoyaltyCredit"
            }
          },
          "ClassOfServiceAvailability": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClassOfServiceAvailability"
            }
          },
          "FareQualifier": {
            "$ref": "#/components/schemas/FareQualifierENUM"
          },
          "stopoverPriced": {
            "$ref": "#/components/schemas/YesNoUnknownEnum"
          },
          "ticketDesignator": {
            "maxLength": 32,
            "type": "string",
            "description": "The ticket designator",
            "example": "BB5662Y"
          },
          "fareTypeCode": {
            "maxLength": 32,
            "type": "string",
            "description": "The ATPCO fare type code",
            "example": "ERU"
          }
        }
      },
      "CabinAirEnum": {
        "type": "string",
        "description": "Specifies the cabin type (e.g. first, business, economy).",
        "example": "Economy",
        "enum": [
          "PremiumFirst",
          "First",
          "Business",
          "PremiumEconomy",
          "Economy"
        ]
      },
      "FareTypeEnum": {
        "type": "string",
        "description": "Defines the type of fares to return (Only public fares, Only private fares, Only agency private fares, Only",
        "enum": [
          "PublicFare",
          "AgencyPrivateFare",
          "AirlinePrivateFare",
          "NetFare"
        ]
      },
      "BrandID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "BrandID"
          },
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object."
          },
          "BrandRef": {
            "type": "string",
            "description": "Used to reference another instance of this object in the same message"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "CustomerLoyaltyCredit": {
        "required": [
          "CustomerLoyalty",
          "Earned",
          "Status"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "CustomerLoyaltyCredit"
          },
          "CustomerLoyalty": {
            "$ref": "#/components/schemas/CustomerLoyalty"
          },
          "Earned": {
            "maxLength": 32,
            "type": "string",
            "description": "Represents the amount of award credit awarded for this offer\\/offering. Award credit can be used for purchasing goods and services through a customer loyalty program",
            "example": "500"
          },
          "Status": {
            "maxLength": 32,
            "type": "string",
            "description": "Represents the amount of status credit awarded for this offer\\/offering. Status credit allow a customer to move up the ladder of a customer loyalty program",
            "example": "gold"
          }
        }
      },
      "ClassOfServiceAvailability": {
        "properties": {
          "value": {
            "maxLength": 2,
            "minLength": 1,
            "pattern": "([a-zA-Z0-9]{1,2})",
            "type": "string",
            "example": "F"
          },
          "number": {
            "type": "integer",
            "description": "The class of service number value",
            "format": "int32",
            "example": 2
          },
          "status": {
            "$ref": "#/components/schemas/AvailabilityStatusEnum"
          }
        },
        "description": "The class of service"
      },
      "FareQualifierENUM": {
        "properties": {
          "value": {
            "$ref": "#/components/schemas/FareQualifierENUM_Base"
          }
        }
      },
      "FareQualifierENUM_Base": {
        "maxItems": 5,
        "type": "string",
        "enum": [
          "Consolidator",
          "Government",
          "Marine",
          "Military",
          "Reward",
          "StandBy",
          "Staff",
          "Student",
          "Tour",
          "Youth",
          "VistFriendsAndRelatives"
        ]
      },
      "ReservationDisplaySequence": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "default": "ReservationDisplaySequence"
          },
          "DisplaySequence": {
            "maxItems": 1000,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DisplaySequence"
            }
          },
          "autoDeleteDateSequence": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "The sequence of the autoDeleteDate (retention segment) within the Reservation",
            "format": "int32"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "DisplaySequence": {
        "required": [
          "OfferRef",
          "displaySequence"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "default": "DisplaySequence"
          },
          "displaySequence": {
            "type": "string",
            "description": "The sequence the products are to be displayed for sequential date ordering",
            "format": "int32",
            "example": "1"
          },
          "OfferRef": {
            "type": "string",
            "description": "Offer reference"
          },
          "ProductRef": {
            "type": "string",
            "description": "Product reference. If blank, display sequence applies to all products within the Offer."
          },
          "Sequence": {
            "type": "integer",
            "description": "Segment sequence, if blank, display sequence applies to all segments within the product",
            "format": "int32",
            "example": 1
          }
        }
      },
      "AgencyServiceFee": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AgencyServiceFeeID"
          },
          {
            "required": [
              "Amount"
            ],
            "properties": {
              "ExpiryDate": {
                "type": "string",
                "description": "The service fee expiry date. Once expiry date has been reached, the service fee information will only be stored in the ReservationReceipt",
                "format": "date-time"
              },
              "Description": {
                "maxLength": 512,
                "type": "string",
                "description": "The description of the service fee",
                "example": "Flight reservation service fee"
              },
              "Amount": {
                "$ref": "#/components/schemas/CurrencyAmount"
              },
              "Tax": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Tax"
                }
              },
              "RelatedDocumentNumber": {
                "$ref": "#/components/schemas/DocumentNumber"
              },
              "TravelerRef": {
                "type": "string",
                "description": "Reference to a Traveler within the Reservation that this service fee applies to"
              },
              "OfferRef": {
                "type": "string",
                "description": "Reference to an Offer within the Reservation that this service fee applies to"
              }
            }
          }
        ]
      },
      "AgencyServiceFeeID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "AgencyServiceFee"
          },
          "id": {
            "type": "string",
            "description": "Unique id for this object within a message",
            "example": "AgencyServiceFee_1"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "Tax": {
        "properties": {
          "value": {
            "type": "number",
            "format": "float",
            "example": 12.2
          },
          "currencyCode": {
            "pattern": "[a-zA-Z]{3}",
            "type": "string",
            "description": "Currency code of the city.",
            "example": "USD"
          },
          "taxCode": {
            "maxLength": 512,
            "type": "string",
            "description": "Tax code of the city",
            "example": "7702"
          },
          "reportingAuthority": {
            "maxLength": 512,
            "type": "string",
            "description": "Identifies the reporting authority such as airport code for XF taxes.",
            "example": "JFK1"
          },
          "purpose": {
            "maxLength": 512,
            "type": "string",
            "description": "purpose",
            "example": "Fuel"
          },
          "description": {
            "maxLength": 4096,
            "type": "string",
            "description": "additional information",
            "example": "Additional details."
          },
          "includedInBase": {
            "$ref": "#/components/schemas/YesNoUnknownEnum"
          },
          "codeAuthority": {
            "maxLength": 32,
            "type": "string",
            "description": "Code Authority",
            "example": "ISO"
          },
          "decimalPlace": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "pattern": "([0-4])",
            "type": "integer",
            "description": "Allowed number of decimals.",
            "format": "int32",
            "example": 2
          },
          "decimalAuthority": {
            "maxLength": 32,
            "type": "string",
            "description": "Decimal Authority",
            "example": "ISO"
          },
          "exemptInd": {
            "type": "boolean",
            "description": "If true, this tax is exempt",
            "example": true
          }
        }
      },
      "DocumentNumber": {
        "properties": {
          "value": {
            "maxLength": 4096,
            "pattern": "([0-9]+)?",
            "type": "string",
            "example": "1259900123456"
          },
          "documentIssuer": {
            "maxLength": 32,
            "type": "string",
            "description": "Document issuer",
            "example": "BA"
          },
          "documentType": {
            "$ref": "#/components/schemas/DocumentTypeEnum"
          }
        }
      },
      "DocumentTypeEnum": {
        "type": "string",
        "description": "Document type like EMD, MCO",
        "example": "Ticket",
        "enum": [
          "EMD",
          "MCO",
          "Ticket"
        ]
      },
      "Accounting": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AccountingID"
          },
          {
            "properties": {
              "dataType": {
                "maxLength": 32,
                "type": "string",
                "description": "Accounting data type",
                "example": "DateTime"
              },
              "template": {
                "maxLength": 512,
                "type": "string",
                "description": "Accounting template",
                "example": "Internal Finance template"
              },
              "NameValuePair": {
                "maxItems": 50,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameValuePair"
                }
              }
            }
          }
        ]
      },
      "DocumentOverrides": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DocumentOverridesID"
          },
          {
            "properties": {
              "OfferIdentifier": {
                "$ref": "#/components/schemas/OfferIdentifier"
              },
              "ProductIdentifier": {
                "$ref": "#/components/schemas/ProductIdentifier"
              },
              "Commissions": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Commissions"
                }
              },
              "DestinationPurpose": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DestinationPurpose"
                }
              },
              "Restrictions": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Restrictions"
                }
              },
              "TourCodes": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TourCodes"
                }
              },
              "ChangeFeeCollectionMethod": {
                "$ref": "#/components/schemas/ChangeFeeCollectionMethod"
              },
              "NetRemitInfo": {
                "$ref": "#/components/schemas/NetRemitInfo"
              },
              "TicketDesignators": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TicketDesignators"
                }
              }
            }
          }
        ]
      },
      "Commissions": {
        "required": [
          "Commission"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "default": "Commissions"
          },
          "TravelerIdentifierRef": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TravelerIdentifierRef"
            }
          },
          "Commission": {
            "$ref": "#/components/schemas/Commission"
          },
          "ApplyTo": {
            "$ref": "#/components/schemas/CommissionApplyEnum"
          }
        }
      },
      "CommissionApplyEnum": {
        "type": "string",
        "example": "Base",
        "enum": [
          "Base",
          "Fee"
        ]
      },
      "DestinationPurpose": {
        "required": [
          "destination",
          "purpose"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "DestinationPurpose"
          },
          "destination": {
            "$ref": "#/components/schemas/DestinationEnum"
          },
          "purpose": {
            "$ref": "#/components/schemas/PurposeEnum"
          }
        }
      },
      "DestinationEnum": {
        "type": "string",
        "enum": [
          "United States of America",
          "Mexico / Central America / Canal Zone/ Costa Rica",
          "Islands and Countries of the Caribbean",
          "South America",
          "Europe",
          "Africa",
          "Middle East / Western Asia",
          "Asia",
          "Australia / New Zealand / Pacific Islands",
          "Canada and Greenland"
        ]
      },
      "PurposeEnum": {
        "type": "string",
        "enum": [
          "Business",
          "Pleasure",
          "Charter Service"
        ]
      },
      "Restrictions": {
        "required": [
          "Restriction"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "default": "Restrictions"
          },
          "TravelerIdentifierRef": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TravelerIdentifierRef"
            }
          },
          "Restriction": {
            "maxItems": 10,
            "minItems": 1,
            "type": "array",
            "items": {
              "maxLength": 128,
              "type": "string"
            }
          },
          "DocumentType": {
            "$ref": "#/components/schemas/DocumentTypeEnum"
          }
        }
      },
      "TourCodes": {
        "required": [
          "TourCode"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "TourCodes"
          },
          "TravelerIdentifierRef": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TravelerIdentifierRef"
            }
          },
          "TourCode": {
            "$ref": "#/components/schemas/TourCode"
          }
        }
      },
      "TourCode": {
        "properties": {
          "value": {
            "maxLength": 32,
            "type": "string"
          },
          "tourCodeType": {
            "$ref": "#/components/schemas/TourCodeTypeEnum"
          }
        },
        "description": "Tour code"
      },
      "TourCodeTypeEnum": {
        "type": "string",
        "enum": [
          "Bulk Tour",
          "Inclusive Tour"
        ]
      },
      "ChangeFeeCollectionMethod": {
        "required": [
          "code"
        ],
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ChangeFeeMethodEnum"
          },
          "code": {
            "maxLength": 32,
            "type": "string",
            "description": "The code value",
            "example": "f2142"
          },
          "subCode": {
            "maxLength": 32,
            "type": "string",
            "description": "The subcode value",
            "example": "631b"
          },
          "description": {
            "maxLength": 128,
            "type": "string",
            "description": "The description value",
            "example": "Change fee collection method"
          },
          "changeFeeIssuedSeparatelyInd": {
            "type": "boolean",
            "description": "if true, the change fee will be issued as a separate transaction to the residual amount",
            "example": true
          },
          "taxIncludedInBaseAmountInd": {
            "type": "boolean",
            "description": "If true, the tax  on the fee will be included in the base fee amount and sent as a single value to the supplier for fulfilment",
            "example": true
          }
        }
      },
      "ChangeFeeMethodEnum": {
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ChangeFeeMethodEnum_Base"
          }
        }
      },
      "ChangeFeeMethodEnum_Base": {
        "type": "string",
        "example": "EMD",
        "enum": [
          "EMD",
          "MCO",
          "Tax",
          "Unknown"
        ]
      },
      "NetRemitInfo": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "NetRemitInfo"
          },
          "CarCode": {
            "maxLength": 32,
            "type": "string",
            "description": "The CAR code applied to this product for use in net remit",
            "example": "ACAR"
          },
          "ValueCode": {
            "maxLength": 32,
            "type": "string",
            "description": "The Value code applied to this product for use in net remit",
            "example": "D1000"
          },
          "ActualSellingFare": {
            "type": "number",
            "description": "The actual selling fare which will override the Offer base fare on the document",
            "format": "float",
            "example": 100.5
          },
          "NetBaseAmount": {
            "$ref": "#/components/schemas/FiledAmount"
          }
        }
      },
      "FiledAmount": {
        "required": [
          "codeAuthority",
          "decimalPlace"
        ],
        "properties": {
          "value": {
            "type": "number",
            "description": "Filed amount value",
            "format": "float",
            "example": 43.3422
          },
          "currencyCode": {
            "pattern": "[a-zA-Z]{3}",
            "type": "string",
            "description": "Filed amount currency code",
            "example": "USD"
          },
          "codeAuthority": {
            "maxLength": 32,
            "type": "string",
            "description": "Filed amount currency code authority",
            "example": "Australian Dollar"
          },
          "decimalPlace": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "pattern": "([0-4])",
            "type": "integer",
            "description": "ISO 4217 standard has a different number of decimals",
            "format": "int32",
            "example": 3
          },
          "decimalAuthority": {
            "maxLength": 32,
            "type": "string",
            "description": "ISO 4217 standard decimal authority",
            "example": "ISO 4217"
          }
        },
        "description": "The base amount of a ticket price or net price that is filed in local currency"
      },
      "TicketDesignators": {
        "required": [
          "@type",
          "TicketDesignator"
        ],
        "properties": {
          "@type": {
            "type": "string"
          },
          "TravelerIdentifierRef": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TravelerIdentifierRef"
            }
          },
          "TicketDesignator": {
            "maxLength": 32,
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "TermsAndConditionsFullHospitality": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TermsAndConditionsFull"
          },
          {
            "properties": {
              "Guarantee": {
                "maxItems": 5,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Guarantee"
                }
              },
              "CancelPenalty": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CancelPenalty"
                }
              },
              "AcceptedCreditCard": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AcceptedCreditCard"
                }
              },
              "Description": {
                "maxItems": 5,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "MealsIncluded": {
                "$ref": "#/components/schemas/MealsIncluded"
              },
              "ProductRateCodeInfo": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductRateCodeInfo"
                }
              },
              "CheckInOutPolicy": {
                "$ref": "#/components/schemas/CheckInOutPolicy"
              },
              "DepositPolicy": {
                "$ref": "#/components/schemas/DepositPolicy"
              },
              "RatePaymentInfo": {
                "$ref": "#/components/schemas/RatePaymentEnum"
              }
            }
          }
        ]
      },
      "Guarantee": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "Guarantee"
          },
          "code": {
            "maxLength": 32,
            "type": "string",
            "description": "Guarantee code"
          },
          "guaranteeType": {
            "$ref": "#/components/schemas/GuaranteeTypeEnum"
          },
          "credentialsRequiredInd": {
            "type": "boolean"
          }
        }
      },
      "GuaranteeTypeEnum": {
        "type": "string",
        "description": "An enumerated type defining the guarantee to be applied to this reservation.",
        "enum": [
          "GuaranteeRequired",
          "CC/DC/Voucher",
          "Profile",
          "NoGuaranteesAccepted",
          "GuaranteesAccepted",
          "DepositRequired",
          "GuaranteesNotRequired",
          "DepositNotRequired",
          "PrepayRequired",
          "PrepayNotRequired",
          "NoDepositsAccepted"
        ]
      },
      "CancelPenalty": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "CancelPenalty"
          },
          "Deadline": {
            "$ref": "#/components/schemas/Deadline"
          },
          "HotelPenalty": {
            "$ref": "#/components/schemas/HotelPenalty"
          },
          "Refundable": {
            "$ref": "#/components/schemas/YesNoUnknownEnum"
          }
        }
      },
      "Deadline": {
        "required": [
          "SpecificDate"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "default": "Deadline"
          },
          "SpecificDate": {
            "$ref": "#/components/schemas/DateOrDateWindows"
          },
          "Time": {
            "type": "string",
            "description": "Local time of the property"
          }
        }
      },
      "HotelPenalty": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string"
          },
          "subjectToTax": {
            "$ref": "#/components/schemas/YesNoUnknownEnum"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "AcceptedCreditCard": {
        "properties": {
          "value": {
            "maxLength": 2,
            "pattern": "([A-Z0-9]+)?",
            "type": "string"
          },
          "processingCountry": {
            "pattern": "[a-zA-Z]{2}",
            "type": "string",
            "description": "Country Code ISO"
          }
        },
        "description": "Credit card code",
        "example": "2031 0222 0321 4532"
      },
      "ProductRateCodeInfo": {
        "required": [
          "RateCodeInfo"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "ProductRateCodeInfo"
          },
          "ProductRef": {
            "type": "string",
            "description": "Product reference",
            "example": "product_1"
          },
          "RateCodeInfo": {
            "$ref": "#/components/schemas/RateCodeInfo"
          }
        }
      },
      "RateCodeInfo": {
        "properties": {
          "value": {
            "maxLength": 32,
            "type": "string",
            "example": "HL12344"
          },
          "rateName": {
            "maxLength": 32,
            "type": "string",
            "description": "Rate code name",
            "example": "Special"
          },
          "rateID": {
            "maxLength": 32,
            "type": "string",
            "description": "Identifier for the rate code",
            "example": "2345"
          },
          "rateCategory": {
            "$ref": "#/components/schemas/RateCategoryEnum"
          }
        },
        "description": "Rate Code"
      },
      "DepositPolicy": {
        "required": [
          "Deposit"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "DepositPolicy"
          },
          "Deposit": {
            "maxItems": 3,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Deposit"
            }
          }
        }
      },
      "Deposit": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "DepositAmount"
          },
          "Date": {
            "type": "string",
            "description": "The date and time the deposit is due",
            "format": "date-time"
          },
          "remainderInd": {
            "type": "boolean",
            "description": "If present and true, the date is when the remainder of the deposit is due"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "RatePaymentEnum": {
        "type": "string",
        "description": "Payment Rate",
        "enum": [
          "PrePay",
          "PostPay",
          "Unknown"
        ]
      },
      "ProductHospitality": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Product"
          },
          {
            "required": [
              "PropertyKey"
            ],
            "properties": {
              "bookingCode": {
                "maxLength": 32,
                "type": "string",
                "description": "Booking code retrieved from the Availability response."
              },
              "guests": {
                "type": "integer",
                "description": "Total number of guests",
                "format": "int32"
              },
              "moreRatesToken": {
                "maxLength": 512,
                "type": "string",
                "description": "More rates token"
              },
              "adaCompliant": {
                "$ref": "#/components/schemas/YesNoUnknownEnum"
              },
              "propertyName": {
                "maxLength": 128,
                "type": "string",
                "description": "The name of the hotel property"
              },
              "PropertyKey": {
                "$ref": "#/components/schemas/PropertyKey"
              },
              "RoomType": {
                "$ref": "#/components/schemas/RoomType"
              },
              "DateRange": {
                "$ref": "#/components/schemas/DateRange"
              }
            }
          }
        ]
      },
      "RoomType": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "RoomType"
          },
          "RoomCharacteristics": {
            "$ref": "#/components/schemas/RoomCharacteristics"
          },
          "Description": {
            "$ref": "#/components/schemas/TextTitleAndDescription"
          },
          "RoomAmenity": {
            "maxItems": 1000,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoomAmenity"
            }
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "RoomCharacteristics": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "RoomCharacteristics"
          },
          "typeCode": {
            "maxLength": 32,
            "type": "string",
            "description": "Type code"
          },
          "viewCode": {
            "pattern": "[0-9A-Z]{1,3}(\\.[A-Z]{3}(\\.X){0,1}){0,1}",
            "type": "string",
            "description": "Free text describing the view."
          },
          "category": {
            "pattern": "[0-9A-Z]{1,3}(\\.[A-Z]{3}(\\.X){0,1}){0,1}",
            "type": "string",
            "description": "Category of the room."
          },
          "smokingAllowed": {
            "$ref": "#/components/schemas/YesNoUnknownEnum"
          },
          "wifiIncluded": {
            "$ref": "#/components/schemas/YesNoUnknownEnum"
          },
          "BedConfiguration": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BedConfiguration"
            }
          },
          "nonSmokingInd": {
            "type": "boolean"
          }
        }
      },
      "BedConfiguration": {
        "properties": {
          "quantity": {
            "type": "integer",
            "description": "The number of bed of this type and size in the room",
            "format": "int32"
          },
          "bedType": {
            "maxLength": 32,
            "type": "string",
            "description": "Configuration of bed(s) in room."
          },
          "size": {
            "maxLength": 32,
            "type": "string",
            "description": "Size of bed(s) in the room."
          }
        }
      },
      "DateRange": {
        "required": [
          "end",
          "start"
        ],
        "properties": {
          "start": {
            "type": "string",
            "description": "Specifies the start date for an event, such as a booking",
            "format": "date",
            "example": "2023-03-03"
          },
          "end": {
            "type": "string",
            "description": "Specifies the end date an event, such as a booking",
            "format": "date",
            "example": "2023-03-03"
          }
        },
        "description": "Specifies the begin and end date of an event"
      },
      "PriceBreakdownHospitality": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PriceBreakdown"
          },
          {
            "properties": {
              "roomPricingType": {
                "$ref": "#/components/schemas/PricingEnum"
              },
              "Description": {
                "maxLength": 1024,
                "type": "string"
              },
              "NightlyRate": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NightlyRate"
                }
              },
              "AverageNightlyRate": {
                "maxItems": 2,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CurrencyAmount"
                }
              },
              "AmenitySurcharges": {
                "$ref": "#/components/schemas/AmenitySurchargesDetail"
              },
              "priceChangesDuringStayInd": {
                "type": "boolean",
                "description": "If present and true, indicates the nightly price changes one or more times during the stay"
              }
            }
          }
        ]
      },
      "PricingEnum": {
        "type": "string",
        "description": "An enumerated type that defines how a service is priced.",
        "enum": [
          "Per stay",
          "Per person",
          "Per night",
          "Per person per night",
          "Per use"
        ]
      },
      "NightlyRate": {
        "required": [
          "Amount",
          "startDate"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "default": "NightlyRate"
          },
          "startDate": {
            "type": "string",
            "description": "Start date",
            "format": "date"
          },
          "nights": {
            "type": "integer",
            "description": "Number of nights this rate applies",
            "format": "int32"
          },
          "Amount": {
            "$ref": "#/components/schemas/Amount"
          }
        }
      },
      "AmenitySurchargesDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AmenitySurcharges"
          },
          {
            "required": [
              "Surcharge"
            ],
            "properties": {
              "Surcharge": {
                "maxItems": 100,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Surcharge"
                }
              }
            }
          }
        ]
      },
      "AmenitySurcharges": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "AmenitySurchargesDetail"
          },
          "TotalSurcharges": {
            "type": "number",
            "description": "A monetary amount, up to 4 decimal places. Decimal place needs to be included.",
            "format": "float",
            "example": 211.11
          },
          "approximateInd": {
            "type": "boolean",
            "description": "if true, the surcharge amounts are approximate",
            "example": false
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "Surcharge": {
        "properties": {
          "value": {
            "type": "number",
            "format": "float",
            "example": 12
          },
          "currencyCode": {
            "pattern": "[a-zA-Z]{3}",
            "type": "string",
            "description": "Sur charge currency code",
            "example": "USD"
          },
          "surchargeCode": {
            "maxLength": 512,
            "type": "string",
            "description": "Sur charge code",
            "example": "ADDITIONAL COSTS"
          },
          "reportingAuthority": {
            "maxLength": 512,
            "type": "string",
            "description": "Sur charge reporting authority",
            "example": "Federal register"
          },
          "purpose": {
            "maxLength": 512,
            "type": "string",
            "description": "Sur charge purpose",
            "example": "tax for extra service"
          },
          "description": {
            "maxLength": 4096,
            "type": "string",
            "description": "Description",
            "example": "Additional data"
          },
          "surchargeApplication": {
            "$ref": "#/components/schemas/ApplicationEnum"
          },
          "surchargeFrequency": {
            "$ref": "#/components/schemas/FrequencyEnum"
          },
          "codeAuthority": {
            "maxLength": 32,
            "type": "string",
            "description": "Surcharge code authority",
            "example": "ISO 4217"
          },
          "decimalPlace": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "pattern": "([0-4])",
            "type": "integer",
            "description": "Decimal place for the currency unit",
            "format": "int32",
            "example": 4
          },
          "decimalAuthority": {
            "maxLength": 32,
            "type": "string",
            "description": "Currency code decimal authority",
            "example": "ISO 4217"
          }
        },
        "description": "The fee amount with feecode and reporting informtion"
      },
      "ApplicationEnum": {
        "type": "string",
        "description": "Application values like perperson , peroom",
        "enum": [
          "PerPerson",
          "PerRoom",
          "PerAccommodation",
          "PerHouse",
          "PerApartment",
          "PerAdult",
          "PerChild"
        ]
      },
      "FrequencyEnum": {
        "type": "string",
        "description": "Stay frequency like PerNight, PerDay",
        "enum": [
          "PerNight",
          "PerDay",
          "PerStay",
          "PerWeek",
          "RoundTrip",
          "OneWay"
        ]
      },
      "DepositNumberOfNights": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Deposit"
          },
          {
            "required": [
              "NumberOfNights"
            ],
            "properties": {
              "NumberOfNights": {
                "type": "integer",
                "description": "The number of nights that must be paid for by deposit",
                "format": "int32"
              }
            }
          }
        ]
      },
      "DepositAmount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Deposit"
          },
          {
            "required": [
              "CurrencyAmount"
            ],
            "properties": {
              "CurrencyAmount": {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            }
          }
        ]
      },
      "DepositPercent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Deposit"
          },
          {
            "properties": {
              "Percent": {
                "minimum": 0,
                "exclusiveMinimum": false,
                "type": "number",
                "description": "The percentage of the price that must be paid for by deposit",
                "format": "float",
                "example": 20
              }
            }
          }
        ]
      },
      "HotelPenaltyAmount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/HotelPenalty"
          },
          {
            "required": [
              "Amount"
            ],
            "properties": {
              "includesTax": {
                "$ref": "#/components/schemas/YesNoUnknownEnum"
              },
              "Amount": {
                "maxItems": 2,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CurrencyAmount"
                }
              }
            }
          }
        ]
      },
      "HotelPenaltyNights": {
        "allOf": [
          {
            "$ref": "#/components/schemas/HotelPenalty"
          },
          {
            "required": [
              "Nights"
            ],
            "properties": {
              "Nights": {
                "type": "integer",
                "description": "The number of nights that will be charged as a penalty",
                "format": "int32"
              }
            }
          }
        ]
      },
      "HotelPenaltyPercent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/HotelPenalty"
          },
          {
            "required": [
              "Percent",
              "appliesTo"
            ],
            "properties": {
              "appliesTo": {
                "$ref": "#/components/schemas/PercentAppliesTo"
              },
              "Percent": {
                "minimum": 0,
                "exclusiveMinimum": false,
                "type": "number",
                "description": "A percentage charged as a Penalty",
                "format": "float"
              },
              "Nights": {
                "type": "integer",
                "description": "The number of nights the percentage needs to be applied to determine cancel penalty amount",
                "format": "int32"
              },
              "Amount": {
                "maxItems": 2,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CurrencyAmount"
                }
              }
            }
          }
        ]
      },
      "PercentAppliesTo": {
        "type": "string",
        "description": "The increment the percent applies to. Default value is Amount",
        "example": "Amount",
        "enum": [
          "Nights",
          "Stay",
          "Amount"
        ]
      },
      "AgeQualifying": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "AgeQualifying"
          },
          "minAge": {
            "type": "integer",
            "description": "MinAge: The minimum age to qualify for AgeQualifyingCode.",
            "format": "int32"
          },
          "maxAge": {
            "type": "integer",
            "description": "Max Age: The maximum age to qualify for AgeQualifyingCode.",
            "format": "int32"
          },
          "ageBucket": {
            "maxLength": 32,
            "type": "string",
            "description": "The age bucket"
          },
          "count": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "The number of age qualifying",
            "format": "int32"
          },
          "ageQualifyingCode": {
            "maxLength": 32,
            "type": "string",
            "description": "Enter 10 for an adult or 08 for a child",
            "example": "10"
          }
        }
      },
      "RoomTypeDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RoomType"
          },
          {
            "properties": {
              "numberOfUnits": {
                "type": "integer",
                "description": "The number of rooms that have been combined to create this room type.",
                "format": "int32"
              },
              "reqdGuaranteeType": {
                "type": "string",
                "description": "TODO-(Should this be Guarantee?)Denotes the form of guarantee for this room."
              },
              "AdditionalDetails": {
                "$ref": "#/components/schemas/AdditionalDetails"
              },
              "RoomOccupancy": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoomOccupancy"
                }
              },
              "roomInd": {
                "type": "boolean",
                "description": "Indicates the room is a sleeping room when true."
              },
              "convertedInd": {
                "type": "boolean",
                "description": "Indicates the room is converted when true."
              },
              "alternateInd": {
                "type": "boolean",
                "description": "Indicates the room is an alternate room type to the requested room type when true."
              }
            }
          }
        ]
      },
      "AdditionalDetails": {
        "required": [
          "AdditionalDetail"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "AdditionalDetails"
          },
          "AdditionalDetail": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdditionalDetail"
            }
          }
        }
      },
      "AdditionalDetail": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "AdditionalDetail"
          },
          "detailType": {
            "pattern": "[0-9A-Z]{1,3}(\\.[A-Z]{3}(\\.X){0,1}){0,1}",
            "type": "string",
            "description": "OTA Code"
          },
          "code": {
            "maxLength": 32,
            "type": "string",
            "description": "Partner code"
          },
          "Amount": {
            "$ref": "#/components/schemas/CurrencyAmount"
          },
          "Description": {
            "$ref": "#/components/schemas/TextTitleAndDescription"
          }
        }
      },
      "RoomOccupancy": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "RoomOccupancy"
          },
          "minOccupancy": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "The minimum occupancy",
            "format": "int32"
          },
          "maxOccupancy": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "The maximum number of room occupants.",
            "format": "int32"
          },
          "AgeQualifying": {
            "maxItems": 20,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgeQualifying"
            }
          }
        }
      },
      "RateCandidateDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RateCandidate"
          },
          {
            "properties": {
              "rateID": {
                "maxLength": 32,
                "type": "string",
                "description": "ID of the rate plan associated with the negotiated rate.",
                "example": "HL123"
              },
              "CustomerLoyalty": {
                "$ref": "#/components/schemas/CustomerLoyalty"
              }
            }
          }
        ]
      },
      "RateCandidatesDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RateCandidates"
          },
          {
            "properties": {
              "numberOfRatePlans": {
                "type": "integer",
                "description": "Minimum number rate plans requested in response",
                "format": "int32"
              }
            }
          }
        ]
      },
      "ProductHospitalityOffer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Product"
          },
          {
            "properties": {
              "propertyDatesRef": {
                "type": "string",
                "description": "Refers to PropertyDates object in the ReferenceList_PropertyDates"
              },
              "bookingCode": {
                "maxLength": 32,
                "type": "string",
                "description": "Booking code retrieved from the Availability response."
              },
              "RoomType": {
                "$ref": "#/components/schemas/RoomType"
              }
            }
          }
        ]
      },
      "TermsAndConditionsHospitality": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TermsAndConditions"
          },
          {
            "properties": {
              "Guarantee": {
                "maxItems": 5,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Guarantee"
                }
              },
              "CancelPenalty": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CancelPenalty"
                }
              },
              "AcceptedCreditCard": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AcceptedCreditCard"
                }
              },
              "Description": {
                "maxItems": 5,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "MealsIncluded": {
                "$ref": "#/components/schemas/MealsIncluded"
              },
              "ProductRateCodeInfo": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductRateCodeInfo"
                }
              },
              "CheckInOutPolicy": {
                "$ref": "#/components/schemas/CheckInOutPolicy"
              },
              "DepositPolicy": {
                "$ref": "#/components/schemas/DepositPolicy"
              },
              "RatePaymentInfo": {
                "$ref": "#/components/schemas/RatePaymentEnum"
              }
            }
          }
        ]
      },
      "ReferenceListPropertyDates": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReferenceList"
          },
          {
            "required": [
              "PropertyDates"
            ],
            "properties": {
              "PropertyDates": {
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PropertyDates"
                }
              }
            }
          }
        ]
      },
      "PropertyDates": {
        "required": [
          "DateRange",
          "PropertyKey",
          "id"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "default": "PropertyDates"
          },
          "availability": {
            "$ref": "#/components/schemas/AvailabilityStatusEnum"
          },
          "adaCompliant": {
            "$ref": "#/components/schemas/YesNoUnknownEnum"
          },
          "id": {
            "type": "string"
          },
          "moreRatesToken": {
            "maxLength": 512,
            "type": "string",
            "description": "More rates token"
          },
          "propertyName": {
            "maxLength": 128,
            "type": "string",
            "description": "The name of the hotel property"
          },
          "PropertyKey": {
            "$ref": "#/components/schemas/PropertyKey"
          },
          "DateRange": {
            "$ref": "#/components/schemas/DateRange"
          }
        }
      },
      "CatalogOfferingHospitality": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CatalogOffering"
          },
          {
            "properties": {
              "Sequence": {
                "minimum": 0,
                "exclusiveMinimum": false,
                "type": "integer",
                "description": "Sequence determines the order in which the offer shall be displayed to the customer",
                "format": "int32"
              },
              "NextSteps": {
                "$ref": "#/components/schemas/NextSteps"
              },
              "limitedAvailabilityInd": {
                "type": "boolean",
                "description": "If true the offering\\/Offer has limited availability"
              }
            }
          }
        ]
      },
      "SearchByAddress": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchBy"
          },
          {
            "required": [
              "SearchAddress"
            ],
            "properties": {
              "SearchAddress": {
                "$ref": "#/components/schemas/SearchAddress"
              }
            }
          }
        ]
      },
      "SearchAddress": {
        "properties": {
          "City": {
            "maxLength": 128,
            "type": "string",
            "description": "City (e.g., Dublin), town, or postal station (i.e., a postal service territory, often used in a military address)."
          },
          "StateProv": {
            "$ref": "#/components/schemas/StateProv"
          },
          "Country": {
            "maxLength": 128,
            "type": "string",
            "description": "Country Code"
          }
        }
      },
      "SearchByAirport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchBy"
          },
          {
            "required": [
              "SearchAirport"
            ],
            "properties": {
              "SearchAirport": {
                "maxLength": 3,
                "minLength": 3,
                "pattern": "([a-zA-Z]{3})",
                "type": "string",
                "description": "Properties located near this IATA airport code"
              }
            }
          }
        ]
      },
      "SearchByCity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchBy"
          },
          {
            "required": [
              "SearchCity"
            ],
            "properties": {
              "SearchCity": {
                "maxLength": 3,
                "minLength": 3,
                "pattern": "([a-zA-Z]{3})",
                "type": "string",
                "description": "Properties located near this IATA city code"
              }
            }
          }
        ]
      },
      "SearchByGeoLocation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchBy"
          },
          {
            "required": [
              "Latitude",
              "Longitude"
            ],
            "properties": {
              "Latitude": {
                "type": "number",
                "description": "The measure of the angular distance on a meridan north or south equator",
                "format": "double",
                "example": 38.8951
              },
              "Longitude": {
                "type": "number",
                "description": "The measure of the angular distance on a meridan east or west equator",
                "format": "double",
                "example": -77.0364
              }
            }
          }
        ]
      },
      "FeesDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Fees"
          },
          {
            "properties": {
              "Fee": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Fee"
                }
              }
            }
          }
        ]
      },
      "Fee": {
        "required": [
          "FeeAmountOrPercent"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "default": "Fee"
          },
          "feeCode": {
            "maxLength": 32,
            "type": "string",
            "description": "Fee code",
            "example": "1011"
          },
          "reportingAuthority": {
            "maxLength": 32,
            "type": "string",
            "description": "Identifies the reporting authority.",
            "example": "OPRA"
          },
          "purpose": {
            "maxLength": 32,
            "type": "string",
            "description": "Fee purpose",
            "example": "Service charge"
          },
          "description": {
            "maxLength": 512,
            "type": "string",
            "description": "Fee description"
          },
          "feeApplication": {
            "$ref": "#/components/schemas/ApplicationEnum"
          },
          "feeFrequency": {
            "$ref": "#/components/schemas/FrequencyEnum"
          },
          "FeeAmountOrPercent": {
            "$ref": "#/components/schemas/FeeAmountOrPercent"
          },
          "Tax": {
            "maxItems": 5,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tax"
            }
          },
          "includedinBaseInd": {
            "type": "boolean",
            "description": "If the fee is included in the Base Price"
          }
        }
      },
      "FeeAmountOrPercent": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "FeeAmountOrPercentAmount"
          },
          "application": {
            "$ref": "#/components/schemas/CommissionEnum"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "TaxesDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Taxes"
          },
          {
            "properties": {
              "Tax": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Tax"
                }
              },
              "TaxPercent": {
                "$ref": "#/components/schemas/TaxPercent"
              }
            }
          }
        ]
      },
      "TaxPercent": {
        "properties": {
          "value": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "number",
            "format": "float",
            "example": 45.54
          },
          "taxCode": {
            "maxLength": 512,
            "type": "string",
            "description": "Tax code",
            "example": "971 - IRS Notice"
          },
          "reportingAuthority": {
            "maxLength": 512,
            "type": "string",
            "description": "Tax reporting authority",
            "example": "Geogia department of revenue"
          },
          "purpose": {
            "maxLength": 512,
            "type": "string",
            "description": "Purpose of tax",
            "example": "statutory tax"
          },
          "description": {
            "maxLength": 4096,
            "type": "string",
            "description": "Description",
            "example": "1.5% of SGST"
          },
          "includedInBase": {
            "$ref": "#/components/schemas/YesNoUnknownEnum"
          }
        }
      },
      "SurchargesDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Surcharges"
          },
          {
            "required": [
              "Surcharge"
            ],
            "properties": {
              "Surcharge": {
                "maxItems": 100,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Surcharge"
                }
              }
            }
          }
        ]
      },
      "Surcharges": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "SurchargesDetail"
          },
          "TotalSurcharges": {
            "type": "number",
            "description": "A monetary amount, up to 4 decimal places. Decimal place needs to be included.",
            "format": "float",
            "example": 211.11
          },
          "approximateInd": {
            "type": "boolean",
            "description": "if true, the surcharge amounts are approximate",
            "example": false
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "ErrorWarningDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorWarning"
          },
          {
            "required": [
              "SourceID"
            ],
            "properties": {
              "SourceID": {
                "maxLength": 128,
                "type": "string",
                "description": "The identifier of the source system sending the error or warning"
              },
              "SourceCode": {
                "maxLength": 32,
                "type": "string",
                "description": "The error or warning code returned by the source airline or host system"
              },
              "SourceDescription": {
                "maxLength": 4096,
                "type": "string",
                "description": "The error or warning message as it is returned by the source airline or host system"
              }
            }
          }
        ]
      },
      "ErrorWarning": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "Error"
          },
          "StatusCode": {
            "type": "integer",
            "description": "Http standard response code",
            "format": "int32"
          },
          "Message": {
            "maxLength": 4096,
            "type": "string",
            "description": "The Travelport standardized error or warning message"
          },
          "NameValuePair": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NameValuePair"
            }
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "ErrorDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "required": [
              "SourceID"
            ],
            "properties": {
              "SourceID": {
                "maxLength": 128,
                "type": "string",
                "description": "The identifier of the source system sending the error or warning"
              },
              "SourceCode": {
                "maxLength": 32,
                "type": "string",
                "description": "The error or warning code returned by the source airline or host system"
              },
              "SourceDescription": {
                "maxLength": 4096,
                "type": "string",
                "description": "The error or warning message as it is returned by the source airline or host system"
              }
            }
          }
        ]
      },
      "WarningDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Warning"
          },
          {
            "required": [
              "SourceID"
            ],
            "properties": {
              "SourceID": {
                "maxLength": 128,
                "type": "string",
                "description": "The identifier of the source system sending the error or warning"
              },
              "SourceCode": {
                "maxLength": 32,
                "type": "string",
                "description": "The error or warning code returned by the source airline or host system"
              },
              "SourceDescription": {
                "maxLength": 4096,
                "type": "string",
                "description": "The error or warning message as it is returned by the source airline or host system"
              }
            }
          }
        ]
      },
      "TravelAgencyDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TravelAgency"
          },
          {
            "properties": {
              "Telephone": {
                "maxItems": 50,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Telephone"
                }
              },
              "Address": {
                "maxItems": 50,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Address"
                }
              },
              "Email": {
                "maxItems": 50,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Email"
                }
              }
            }
          }
        ]
      },
      "AmountPercentAmount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AmountPercent"
          },
          {
            "properties": {
              "Amount": {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            }
          }
        ]
      },
      "AmountPercent": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "AmountPercentAmount"
          },
          "application": {
            "$ref": "#/components/schemas/CommissionEnum"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "AmountPercentPercent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AmountPercent"
          },
          {
            "properties": {
              "Percent": {
                "minimum": 0,
                "exclusiveMinimum": false,
                "type": "number",
                "description": "Percent amount of commission",
                "format": "float",
                "example": 20
              }
            }
          }
        ]
      },
      "PenaltyAmount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Penalty"
          },
          {
            "properties": {
              "Amount": {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            }
          }
        ]
      },
      "Penalty": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "PenaltyAmount"
          },
          "application": {
            "$ref": "#/components/schemas/CommissionEnum"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "PenaltyPercent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Penalty"
          },
          {
            "properties": {
              "Percent": {
                "minimum": 0,
                "exclusiveMinimum": false,
                "type": "number",
                "description": "Percent amount of commission",
                "format": "float",
                "example": 20
              }
            }
          }
        ]
      },
      "FeeAmountOrPercentAmount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FeeAmountOrPercent"
          },
          {
            "properties": {
              "Amount": {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            }
          }
        ]
      },
      "FeeAmountOrPercentPercent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FeeAmountOrPercent"
          },
          {
            "properties": {
              "Percent": {
                "minimum": 0,
                "exclusiveMinimum": false,
                "type": "number",
                "description": "Percent amount of commission",
                "format": "float",
                "example": 20
              }
            }
          }
        ]
      },
      "CommissionAmount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Commission"
          },
          {
            "properties": {
              "Amount": {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            }
          }
        ]
      },
      "CommissionPercent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Commission"
          },
          {
            "properties": {
              "Percent": {
                "minimum": 0,
                "exclusiveMinimum": false,
                "type": "number",
                "description": "Percent amount of commission",
                "format": "float",
                "example": 20
              }
            }
          }
        ]
      },
      "ConfirmationHold": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Confirmation"
          },
          {
            "required": [
              "Locator"
            ],
            "properties": {
              "Locator": {
                "$ref": "#/components/schemas/Locator"
              },
              "OfferStatus": {
                "$ref": "#/components/schemas/OfferStatus"
              },
              "ShoppingCartProductStatus": {
                "$ref": "#/components/schemas/ShoppingCartProductStatusAir"
              }
            }
          }
        ]
      },
      "Locator": {
        "properties": {
          "value": {
            "maxLength": 16,
            "pattern": "([A-Z0-9]+)?",
            "type": "string",
            "example": "ZXG25P"
          },
          "locatorType": {
            "maxLength": 32,
            "type": "string",
            "description": "Specifies the type of reservation ID",
            "example": "Locator"
          },
          "source": {
            "maxLength": 128,
            "type": "string",
            "description": "Specifies a unique identifier to indicate the source system which generated the resid",
            "example": "1G"
          },
          "sourceContext": {
            "maxLength": 128,
            "type": "string",
            "description": "Specifies the context of the source",
            "example": "Travelport"
          },
          "otaType": {
            "pattern": "[0-9A-Z]{1,3}(\\.[A-Z]{3}(\\.X){0,1}){0,1}",
            "type": "string",
            "description": "Used for codes",
            "example": "14.UIT"
          },
          "creationDate": {
            "type": "string",
            "description": "Reservation Creation date",
            "format": "date",
            "example": "2022-03-01"
          }
        },
        "description": "Contains the locator (PNR or external locator) or cancellation number for the reservation, order, or offer"
      },
      "OfferStatus": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "OfferStatus"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "ShoppingCartProductStatusAir": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ShoppingCartProductStatus"
          },
          {
            "properties": {
              "StatusAir": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StatusAir"
                }
              }
            }
          }
        ]
      },
      "ShoppingCartProductStatus": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "ShoppingCartProductStatusAir"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "StatusAir": {
        "properties": {
          "value": {
            "$ref": "#/components/schemas/OfferStatusEnum"
          },
          "flightRefs": {
            "type": "array",
            "description": "The flightRefs the status is applicable to within the Offer",
            "items": {
              "type": "string"
            }
          },
          "code": {
            "maxLength": 32,
            "type": "string",
            "description": "Status code"
          },
          "pastDateInd": {
            "type": "boolean",
            "description": "If true, the flight is considered to be past date",
            "example": true
          }
        }
      },
      "OfferStatusEnum": {
        "type": "string",
        "description": "Offer Status like confirmed ,Pending etc",
        "enum": [
          "Confirmed",
          "Cancelled",
          "Pending",
          "Modifed",
          "Rejected",
          "Waitlisted"
        ]
      },
      "ReceiptPayment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Receipt"
          },
          {
            "properties": {
              "PaymentIdentifier": {
                "$ref": "#/components/schemas/PaymentIdentifier"
              },
              "Document": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Document"
                }
              },
              "depositInd": {
                "type": "boolean",
                "description": "if true, the receipt is for a deposit or prepayment"
              },
              "guaranteeInd": {
                "type": "boolean",
                "description": "if true, the receipt is for a guarantee only. Guarantee rules are in accordance with the Offer TermsAndConditions."
              }
            }
          }
        ]
      },
      "PaymentIdentifier": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "Payment"
          },
          "id": {
            "type": "string"
          },
          "PaymentRef": {
            "type": "string"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        }
      },
      "Document": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "DocumentTicket"
          },
          "Number": {
            "maxLength": 32,
            "type": "string",
            "description": "The identifying number of the document",
            "example": "23"
          },
          "TravelerIdentifierRef": {
            "$ref": "#/components/schemas/TravelerIdentifierRef"
          },
          "Amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "WaiverCode": {
            "$ref": "#/components/schemas/WaiverCode"
          },
          "Commission": {
            "$ref": "#/components/schemas/Commission"
          },
          "CumulativeValue": {
            "$ref": "#/components/schemas/CumulativeValue"
          },
          "IssuingPCC": {
            "maxLength": 10,
            "minLength": 2,
            "pattern": "([a-zA-Z0-9]{2,10})",
            "type": "string",
            "description": "Document issuing pcc",
            "example": "RPO of india"
          },
          "IssuingIATA": {
            "pattern": "([0-9]{8})",
            "type": "string",
            "description": "Document issuing IATA",
            "example": "U.S. passport"
          },
          "IssuingCity": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "([a-zA-Z]{3})",
            "type": "string",
            "description": "Document issuing city",
            "example": "NYK"
          },
          "FiledAmount": {
            "$ref": "#/components/schemas/FiledAmount"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "WaiverCode": {
        "properties": {
          "value": {
            "maxLength": 128,
            "type": "string"
          },
          "reasonCode": {
            "type": "integer",
            "description": "A code assigned to identify the reason for disruption",
            "format": "int32",
            "example": 3312
          }
        }
      },
      "CumulativeValue": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "CumulativeAmount"
          },
          "currencySource": {
            "$ref": "#/components/schemas/CurrencySourceEnum"
          },
          "CurrencyCode": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "Base": {
            "type": "number",
            "description": "The price prior to all applicable taxes of a product such as the rate for a room or fare for a flight.",
            "format": "float",
            "example": 120.2
          },
          "Taxes": {
            "$ref": "#/components/schemas/Taxes"
          },
          "Fees": {
            "$ref": "#/components/schemas/Fees"
          },
          "Total": {
            "type": "number",
            "description": "Specifies the total price including base + taxes + fees",
            "format": "float",
            "example": 30.13
          },
          "approximateInd": {
            "type": "boolean",
            "description": "True if this amount has been converted from the original amount",
            "example": true
          }
        }
      },
      "ReceiptCancellation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Receipt"
          },
          {
            "properties": {
              "Cancellation": {
                "$ref": "#/components/schemas/Cancellation"
              }
            }
          }
        ]
      },
      "Cancellation": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "CancellationHold"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "CancellationHold": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Cancellation"
          },
          {
            "properties": {
              "Locator": {
                "$ref": "#/components/schemas/Locator"
              }
            }
          }
        ]
      },
      "AppliesToOffer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AppliesTo"
          },
          {
            "properties": {
              "OfferIdentifier": {
                "maxItems": 1000,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OfferIdentifier"
                }
              }
            }
          }
        ]
      },
      "AppliesToOfferProduct": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AppliesTo"
          },
          {
            "properties": {
              "OfferIdentifier": {
                "$ref": "#/components/schemas/OfferIdentifier"
              },
              "ProductIdentifier": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductIdentifier"
                }
              }
            }
          }
        ]
      },
      "ReservationBuildFromCatalogOffering": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReservationBuild"
          },
          {
            "properties": {
              "BuildFromCatalogOfferingHospitality": {
                "$ref": "#/components/schemas/BuildFromCatalogOfferingHospitality"
              }
            }
          }
        ]
      },
      "OfferStatusHospitality": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OfferStatus"
          },
          {
            "properties": {
              "Status": {
                "$ref": "#/components/schemas/OfferStatusEnum"
              }
            }
          }
        ]
      },
      "FormOfPaymentCash": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FormOfPaymentID"
          },
          {
            "properties": {
              "agentNonRefundableInd": {
                "type": "boolean",
                "description": "This indicates that the Cash payment should not be refunded"
              }
            }
          }
        ]
      },
      "FormOfPaymentPaymentCard": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FormOfPaymentID"
          },
          {
            "properties": {
              "PaymentCard": {
                "$ref": "#/components/schemas/PaymentCard"
              },
              "inhibitPaymentCardAuthorizationInd": {
                "type": "boolean",
                "description": "If true, the payment card will not go through card authorization process"
              },
              "ExtendedPayment": {
                "$ref": "#/components/schemas/ExtendedPayment"
              }
            }
          }
        ]
      },
      "PaymentCard": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "PaymentCard"
          },
          "id": {
            "type": "string",
            "description": "Payment card reference ID.",
            "example": "paymentCard_01"
          },
          "effectiveDate": {
            "type": "string",
            "description": "Indicated starting date.",
            "format": "date"
          },
          "expireDate": {
            "pattern": "(0[1-9]|1[0-2])[0-9][0-9]",
            "type": "string",
            "description": "The expiration date value",
            "example": "0558"
          },
          "approvalCode": {
            "maxLength": 16,
            "pattern": "([A-Z0-9]+)?",
            "type": "string",
            "description": "The approval code value",
            "example": "C59"
          },
          "PrivacyGroup": {
            "$ref": "#/components/schemas/Privacy"
          },
          "CardType": {
            "$ref": "#/components/schemas/PaymentCardTypeEnum"
          },
          "CardCode": {
            "maxLength": 2,
            "pattern": "([A-Z0-9]+)?",
            "type": "string",
            "description": "Specifies the two character code (MC, VI, AX, etc) for the payment card (open enumeration)"
          },
          "CardBrand": {
            "$ref": "#/components/schemas/PaymentCardTypeIssuer"
          },
          "CardIssuer": {
            "$ref": "#/components/schemas/PaymentCardTypeIssuer"
          },
          "CardHolderName": {
            "maxLength": 128,
            "type": "string",
            "description": "Name as displayed on Payment Card"
          },
          "CardNumber": {
            "$ref": "#/components/schemas/CardNumber"
          },
          "SeriesCode": {
            "$ref": "#/components/schemas/SeriesCode"
          },
          "MagneticStripe": {
            "maxItems": 3,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MagneticStripe"
            }
          },
          "secureInd": {
            "type": "boolean",
            "description": "Implementer: If true, all or a portion of this data is secure, via tokenization, encryption and\\/or masking."
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "Privacy": {
        "properties": {
          "id": {
            "type": "string",
            "description": "Optional internally referenced id",
            "example": "2"
          },
          "shareMarketing": {
            "$ref": "#/components/schemas/YesNoInheritEnum"
          },
          "shareSync": {
            "$ref": "#/components/schemas/YesNoInheritEnum"
          },
          "optOutInd": {
            "$ref": "#/components/schemas/YesNoInheritEnum"
          },
          "optInStatus": {
            "$ref": "#/components/schemas/OptInStatusEnum"
          },
          "optInDate": {
            "type": "string",
            "description": "The datetime of receiving the opt in notice",
            "format": "date-time"
          },
          "optOutDate": {
            "type": "string",
            "description": "The datetime the opt out notice was received",
            "format": "date-time"
          }
        },
        "description": "Confidential details for marketing purpose"
      },
      "PaymentCardTypeEnum": {
        "type": "string",
        "description": "Credit, Debit, etc.",
        "enum": [
          "Credit",
          "Debit",
          "Gift"
        ]
      },
      "PaymentCardTypeIssuer": {
        "properties": {
          "paymentCardIssuers": {
            "$ref": "#/components/schemas/ListPaymentCardIssuerEnum"
          },
          "paymentCardIssuersExtension": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string"
          },
          "issueNumber": {
            "type": "integer",
            "description": "Assigned Type: c-1100:NumberDoubleDigit",
            "format": "int32"
          }
        },
        "description": "This object contains Cards details for Payment"
      },
      "ListPaymentCardIssuerEnum": {
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ListPaymentCardIssuerEnum_Base"
          }
        }
      },
      "ListPaymentCardIssuerEnum_Base": {
        "type": "string",
        "description": "Source: OpenTravel",
        "example": "VISA",
        "enum": [
          "VISA",
          "USAirways",
          "UnitedAirlines",
          "StarwoodHotels",
          "SouthwestAirlines",
          "RitzCarlton",
          "Mastercard",
          "Mariott",
          "Hyatt",
          "Hilton",
          "Eurocard",
          "Disney",
          "DiscoverCard",
          "DeltaAirlines",
          "ContinentalAirlines",
          "Citibank",
          "Chase",
          "CapitalOne",
          "BritishAirways",
          "BankOfAmerica",
          "AmericanExpress"
        ]
      },
      "CardNumber": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "CardNumber"
          },
          "encryptionKey": {
            "type": "string",
            "description": "Note: This contains a key required to retrieve the full payment instrument details compliant with PCI DSS standards.",
            "example": "secret"
          },
          "encryptionKeyMethod": {
            "type": "string",
            "description": "Developer: This contains a reference to the key generation method being used - this is NOT the key value.",
            "example": "RSA"
          },
          "encryptionMethod": {
            "type": "string",
            "description": "OpenTravel Best Practice: Encryption Method: When using the OpenTravel Encryption element, it is RECOMMENDED that all trading partners be informed of all encryption methods being used in advance of implementation to ensure message processing compatibility.",
            "example": "RSA"
          },
          "encryptedValue": {
            "type": "string",
            "description": "Encrypted value",
            "example": "5dfc52b51bd35553df8592078de921bc"
          },
          "mask": {
            "pattern": "[0-9a-zA-Z]{1,32}",
            "type": "string",
            "description": "Masked Value",
            "example": "xxxx436"
          },
          "token": {
            "pattern": "[0-9a-zA-Z]{1,32}",
            "type": "string",
            "description": "Token value",
            "example": "A567GTREWQ"
          },
          "tokenProviderID": {
            "type": "string",
            "description": "Developer: This contains a provider ID if multiple providers are used for secure information exchange.",
            "example": "c1234532"
          },
          "authenticationMethod": {
            "$ref": "#/components/schemas/EncryptionTokenTypeAuthEnum"
          },
          "PlainText": {
            "type": "string",
            "description": "Don't use this unless it is REALLY ok to not use encryption. Non-secure (plain text) value.",
            "example": "un-encrypted data"
          },
          "ErrorWarning": {
            "$ref": "#/components/schemas/ErrorWarning"
          }
        }
      },
      "EncryptionTokenTypeAuthEnum": {
        "type": "string",
        "description": "Type of Authentication",
        "enum": [
          "SecurityCode",
          "MagneticStripe"
        ]
      },
      "SeriesCode": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "SeriesCode"
          },
          "encryptionKey": {
            "type": "string",
            "description": "Note: This contains a key required to retrieve the full payment instrument details compliant with PCI DSS standards.",
            "example": "secret"
          },
          "encryptionKeyMethod": {
            "type": "string",
            "description": "Developer: This contains a reference to the key generation method being used - this is NOT the key value.",
            "example": "RSA"
          },
          "encryptionMethod": {
            "type": "string",
            "description": "OpenTravel Best Practice: Encryption Method: When using the OpenTravel Encryption element, it is RECOMMENDED that all trading partners be informed of all encryption methods being used in advance of implementation to ensure message processing compatibility.",
            "example": "RSA"
          },
          "encryptedValue": {
            "type": "string",
            "description": "Encrypted value",
            "example": "5dfc52b51bd35553df8592078de921bc"
          },
          "mask": {
            "pattern": "[0-9a-zA-Z]{1,32}",
            "type": "string",
            "description": "Masked Value",
            "example": "xxxx436"
          },
          "token": {
            "pattern": "[0-9a-zA-Z]{1,32}",
            "type": "string",
            "description": "Token value",
            "example": "A567GTREWQ"
          },
          "tokenProviderID": {
            "type": "string",
            "description": "Developer: This contains a provider ID if multiple providers are used for secure information exchange.",
            "example": "c1234532"
          },
          "authenticationMethod": {
            "$ref": "#/components/schemas/EncryptionTokenTypeAuthEnum"
          },
          "PlainText": {
            "type": "string",
            "description": "Don't use this unless it is REALLY ok to not use encryption. Non-secure (plain text) value.",
            "example": "un-encrypted data"
          },
          "ErrorWarning": {
            "$ref": "#/components/schemas/ErrorWarning"
          }
        }
      },
      "MagneticStripe": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "MagneticStripe"
          },
          "encryptionKey": {
            "type": "string",
            "description": "Note: This contains a key required to retrieve the full payment instrument details compliant with PCI DSS standards.",
            "example": "secret"
          },
          "encryptionKeyMethod": {
            "type": "string",
            "description": "Developer: This contains a reference to the key generation method being used - this is NOT the key value.",
            "example": "RSA"
          },
          "encryptionMethod": {
            "type": "string",
            "description": "OpenTravel Best Practice: Encryption Method: When using the OpenTravel Encryption element, it is RECOMMENDED that all trading partners be informed of all encryption methods being used in advance of implementation to ensure message processing compatibility.",
            "example": "RSA"
          },
          "encryptedValue": {
            "type": "string",
            "description": "Encrypted value",
            "example": "5dfc52b51bd35553df8592078de921bc"
          },
          "mask": {
            "pattern": "[0-9a-zA-Z]{1,32}",
            "type": "string",
            "description": "Masked Value",
            "example": "xxxx436"
          },
          "token": {
            "pattern": "[0-9a-zA-Z]{1,32}",
            "type": "string",
            "description": "Token value",
            "example": "A567GTREWQ"
          },
          "tokenProviderID": {
            "type": "string",
            "description": "Developer: This contains a provider ID if multiple providers are used for secure information exchange.",
            "example": "c1234532"
          },
          "authenticationMethod": {
            "$ref": "#/components/schemas/EncryptionTokenTypeAuthEnum"
          },
          "PlainText": {
            "type": "string",
            "description": "Don't use this unless it is REALLY ok to not use encryption. Non-secure (plain text) value.",
            "example": "un-encrypted data"
          },
          "ErrorWarning": {
            "$ref": "#/components/schemas/ErrorWarning"
          }
        }
      },
      "FormOfPaymentForfeit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FormOfPaymentID"
          },
          {
            "properties": {
              "forfeitInd": {
                "type": "boolean",
                "description": "If true, this form of payment instruction is to forfeit residual amounts specified in an Offer. Used in conjunction with Payment to specify which amounts to be forfeited"
              }
            }
          }
        ]
      },
      "FormOfPaymentBSP": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FormOfPaymentID"
          },
          {
            "properties": {
              "accountNumber": {
                "maxLength": 32,
                "type": "string",
                "description": "The account number for the Form of payment BSP",
                "example": "378282246310005"
              }
            }
          }
        ]
      },
      "FormOfPaymentAgencyAccount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FormOfPaymentID"
          },
          {
            "properties": {
              "agencyId": {
                "maxLength": 32,
                "type": "string",
                "description": "The agency Id",
                "example": "87654321"
              }
            }
          }
        ]
      },
      "FormOfPaymentInvoice": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FormOfPaymentID"
          },
          {
            "properties": {
              "InvoiceNumber": {
                "maxLength": 32,
                "type": "string",
                "description": "The invoice number applicable to this form of payment. Send null or empty string if no invoice number specified."
              }
            }
          }
        ]
      },
      "FormOfPaymentDocument": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FormOfPaymentID"
          },
          {
            "properties": {
              "DocumentNumber": {
                "$ref": "#/components/schemas/DocumentNumber"
              }
            }
          }
        ]
      },
      "FormOfPaymentWaiverCode": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FormOfPaymentID"
          },
          {
            "properties": {
              "WaiverCode": {
                "$ref": "#/components/schemas/WaiverCode"
              }
            }
          }
        ]
      },
      "PaymentCardDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentCard"
          },
          {
            "properties": {
              "countryOfIssue": {
                "pattern": "[a-zA-Z]{2}",
                "type": "string",
                "description": "The country code ISO",
                "example": "AG"
              },
              "companyCardReference": {
                "maxLength": 4096,
                "pattern": "([0-9a-zA-Z]+)?",
                "type": "string",
                "description": "The company card reference",
                "example": "IOR1386861"
              },
              "bankName": {
                "maxLength": 64,
                "type": "string",
                "description": "The bank name value",
                "example": "Bank of America"
              },
              "bankCountryCode": {
                "pattern": "[a-zA-Z]{2}",
                "type": "string",
                "description": "The bank country code ISO",
                "example": "BOFAUS3N"
              },
              "bankStateCode": {
                "maxLength": 2,
                "minLength": 2,
                "pattern": "([a-zA-Z]{2})",
                "type": "string",
                "description": "The bank state code ISO",
                "example": "NE"
              },
              "CardHolderId": {
                "$ref": "#/components/schemas/Identifier"
              },
              "PersonName": {
                "$ref": "#/components/schemas/PersonName"
              },
              "Address": {
                "$ref": "#/components/schemas/Address"
              },
              "Telephone": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Telephone"
                }
              },
              "Email": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Email"
                }
              },
              "CustomerLoyalty": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomerLoyalty"
                }
              },
              "SignatureOnFile": {
                "$ref": "#/components/schemas/SignatureOnFile"
              },
              "ThreeDomainSecurity": {
                "$ref": "#/components/schemas/ThreeDomainSecurity"
              },
              "extendedPaymentInd": {
                "type": "boolean",
                "description": "Implementer: If true, the credit card company is requested to delay the date on which the amount of this transaction is applied to the customer's account."
              },
              "enettInd": {
                "type": "boolean",
                "description": "True if this payment card has been issued through Enett",
                "example": true
              },
              "thirdPartyInd": {
                "type": "boolean",
                "description": "If true, then the payment card holder is not one of the travelers in the reservation",
                "example": true
              },
              "acceptanceOverrideInd": {
                "type": "boolean",
                "description": "If true, override airline restriction on the payment card",
                "example": true
              }
            }
          }
        ]
      },
      "SignatureOnFile": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "SignatureOnFile"
          },
          "Date_EffectiveExpire": {
            "$ref": "#/components/schemas/DateEffectiveExpire"
          },
          "signatureOnFileInd": {
            "type": "boolean",
            "description": "When true, indicates a signature has been obtained.",
            "example": true
          }
        }
      },
      "DateEffectiveExpire": {
        "properties": {
          "effective": {
            "type": "string",
            "description": "Indicates the starting date.",
            "format": "date"
          },
          "expire": {
            "type": "string",
            "description": "Indicates the ending date.",
            "format": "date"
          },
          "expireDateExclusiveInd": {
            "type": "boolean",
            "description": "When true, indicates that the ExpireDate is the first day after the applicable period (e.g. when expire date is Oct 15  the last date of the period is Oct 14)."
          }
        },
        "description": "Used to identify the effective date and\\/or expiration date."
      },
      "ThreeDomainSecurity": {
        "required": [
          "ThreeDomainSecurityGateway",
          "ThreeDomainSecurityResults"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "ThreeDomainSecurity"
          },
          "ThreeDomainSecurityGateway": {
            "$ref": "#/components/schemas/ThreeDomainSecurityGateway"
          },
          "ThreeDomainSecurityResults": {
            "$ref": "#/components/schemas/ThreeDomainSecurityResults"
          }
        }
      },
      "ThreeDomainSecurityGateway": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "ThreeDomainSecurityGateway"
          },
          "eCI": {
            "maxLength": 1,
            "type": "string",
            "description": "The eCI value",
            "example": "2"
          },
          "merchantID": {
            "type": "string",
            "description": "The merchant ID value",
            "example": "mycart"
          },
          "processorID": {
            "type": "string",
            "description": "The processor ID value",
            "example": "201"
          },
          "uRL": {
            "type": "string",
            "description": "Transaction URL.",
            "example": "https://transactionURL"
          },
          "AuthenticationVerification": {
            "$ref": "#/components/schemas/AuthenticationVerification"
          },
          "Password": {
            "$ref": "#/components/schemas/Password"
          }
        }
      },
      "AuthenticationVerification": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "AuthenticationVerification"
          },
          "encryptionKey": {
            "type": "string",
            "description": "Note: This contains a key required to retrieve the full payment instrument details compliant with PCI DSS standards.",
            "example": "secret"
          },
          "encryptionKeyMethod": {
            "type": "string",
            "description": "Developer: This contains a reference to the key generation method being used - this is NOT the key value.",
            "example": "RSA"
          },
          "encryptionMethod": {
            "type": "string",
            "description": "OpenTravel Best Practice: Encryption Method: When using the OpenTravel Encryption element, it is RECOMMENDED that all trading partners be informed of all encryption methods being used in advance of implementation to ensure message processing compatibility.",
            "example": "RSA"
          },
          "encryptedValue": {
            "type": "string",
            "description": "Encrypted value",
            "example": "5dfc52b51bd35553df8592078de921bc"
          },
          "mask": {
            "pattern": "[0-9a-zA-Z]{1,32}",
            "type": "string",
            "description": "Masked Value",
            "example": "xxxx436"
          },
          "token": {
            "pattern": "[0-9a-zA-Z]{1,32}",
            "type": "string",
            "description": "Token value",
            "example": "A567GTREWQ"
          },
          "tokenProviderID": {
            "type": "string",
            "description": "Developer: This contains a provider ID if multiple providers are used for secure information exchange.",
            "example": "c1234532"
          },
          "authenticationMethod": {
            "$ref": "#/components/schemas/EncryptionTokenTypeAuthEnum"
          },
          "PlainText": {
            "type": "string",
            "description": "Don't use this unless it is REALLY ok to not use encryption. Non-secure (plain text) value.",
            "example": "un-encrypted data"
          },
          "ErrorWarning": {
            "$ref": "#/components/schemas/ErrorWarning"
          }
        }
      },
      "Password": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "Password"
          },
          "encryptionKey": {
            "type": "string",
            "description": "Note: This contains a key required to retrieve the full payment instrument details compliant with PCI DSS standards.",
            "example": "secret"
          },
          "encryptionKeyMethod": {
            "type": "string",
            "description": "Developer: This contains a reference to the key generation method being used - this is NOT the key value.",
            "example": "RSA"
          },
          "encryptionMethod": {
            "type": "string",
            "description": "OpenTravel Best Practice: Encryption Method: When using the OpenTravel Encryption element, it is RECOMMENDED that all trading partners be informed of all encryption methods being used in advance of implementation to ensure message processing compatibility.",
            "example": "RSA"
          },
          "encryptedValue": {
            "type": "string",
            "description": "Encrypted value",
            "example": "5dfc52b51bd35553df8592078de921bc"
          },
          "mask": {
            "pattern": "[0-9a-zA-Z]{1,32}",
            "type": "string",
            "description": "Masked Value",
            "example": "xxxx436"
          },
          "token": {
            "pattern": "[0-9a-zA-Z]{1,32}",
            "type": "string",
            "description": "Token value",
            "example": "A567GTREWQ"
          },
          "tokenProviderID": {
            "type": "string",
            "description": "Developer: This contains a provider ID if multiple providers are used for secure information exchange.",
            "example": "c1234532"
          },
          "authenticationMethod": {
            "$ref": "#/components/schemas/EncryptionTokenTypeAuthEnum"
          },
          "PlainText": {
            "type": "string",
            "description": "Don't use this unless it is REALLY ok to not use encryption. Non-secure (plain text) value.",
            "example": "un-encrypted data"
          },
          "ErrorWarning": {
            "$ref": "#/components/schemas/ErrorWarning"
          }
        }
      },
      "ThreeDomainSecurityResults": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "ThreeDomainSecurityResults"
          },
          "cAVV": {
            "type": "string",
            "description": "The cAVV value",
            "example": "AAABAFaQRwAAAAAAEZBHAAAAAAA=ECI05"
          },
          "pAResStatus": {
            "maxLength": 1,
            "type": "string",
            "description": "The pAResStatus value",
            "example": "1"
          },
          "signatureVerfication": {
            "type": "string",
            "description": "The signature Verification value",
            "example": "Y"
          },
          "transactionID": {
            "type": "string",
            "description": "The transaction ID",
            "example": "9D920E9-6FCF-4A74-A4E0-D6A591D1108F"
          },
          "xID": {
            "type": "string",
            "description": "Merchants must ensure that each Payer Authentication Request (PAReq) contains a unique combination of account ID and XID",
            "example": "2bxUs1emK0SCevbivcApzAcAAQk="
          },
          "eCI": {
            "maxLength": 32,
            "type": "string",
            "description": "Electronic Commerce Indicator - 3-D secure data, contact your authenticator for rules and downline processing.",
            "example": "2"
          },
          "uCAFIndicator": {
            "maxLength": 32,
            "type": "string",
            "description": "Universal Card Authentication Field™ MasterCard only UCAF is the mechanism that is used to transmit the AAV from the merchant to issuer for authentication purposes during the authorization process",
            "example": "0"
          }
        }
      },
      "FormOfPaymentVirtualPaymentAccount": {
        "properties": {
          "Supplier": {
            "maxLength": 32,
            "type": "string",
            "example": "Conferma"
          },
          "AccountID": {
            "maxLength": 32,
            "type": "string",
            "example": "123"
          },
          "AlternateEmailAddress": {
            "type": "array",
            "description": "The alternate agency email to be used for correspondence with this virtual payment",
            "items": {
              "$ref": "#/components/schemas/Email"
            }
          },
          "PaymentComment": {
            "maxLength": 512,
            "type": "string",
            "description": "Optional text to be sent to the supplier"
          },
          "AlternateHotelFax": {
            "type": "array",
            "description": "Hotel fax number to be used if the hotel fax is unknown or not provided in Property details",
            "items": {
              "$ref": "#/components/schemas/Telephone"
            }
          },
          "MaximumChargeableAmount": {
            "type": "array",
            "description": "The maximum amount that the supplier may charge to the payment card including room rate and any incidentals specified",
            "items": {
              "$ref": "#/components/schemas/CurrencyAmount"
            }
          },
          "IncidentalCharges": {
            "type": "array",
            "description": "List of incidentals that are permitted to be charged to the virtual payment card.",
            "example": "BAR, BUS, CRB",
            "items": {
              "maxLength": 32,
              "type": "string"
            }
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/FormOfPaymentID"
          }
        ]
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad Request- 400",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized - 401",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "PaymentRequired": {
        "description": "PaymentRequired - 402",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden - 403",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "NotFound": {
        "description": "Not Found - 404",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal Server Error - 500",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      }
    },
    "parameters": {
      "TraceId": {
        "name": "TraceId",
        "in": "header",
        "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
        "required": false,
        "style": "simple",
        "explode": false,
        "schema": {
          "maxLength": 89,
          "minLength": 10,
          "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
          "type": "string"
        }
      },
      "XAUTH_TRAVELPORT_ACCESSGROUP": {
        "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
        "in": "header",
        "description": "Identifies the Travelport access group with which the caller is associated",
        "required": false,
        "style": "simple",
        "explode": false,
        "schema": {
          "maxLength": 36,
          "minLength": 36,
          "pattern": "([a-zA-Z-0-9-_]*)",
          "type": "string"
        }
      },
      "TravelportPlusSessionID": {
        "name": "TravelportPlusSessionID",
        "in": "header",
        "description": "Travelport Plus Session ID used to maintain an established agency session",
        "required": false,
        "style": "simple",
        "explode": false,
        "schema": {
          "maxLength": 100,
          "minLength": 0,
          "pattern": "([a-zA-Z-0-9-_]*)",
          "type": "string"
        }
      }
    },
    "requestBodies": {
      "ReservationID": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ReservationDetailWrapper"
            }
          }
        },
        "required": true
      }
    },
    "securitySchemes": {
      "OAuth2": {
        "type": "oauth2",
        "flows": {
          "password": {
            "tokenUrl": "https://oauth.pp.travelport.com/oauth/oauth20/token",
            "scopes": {}
          }
        }
      }
    }
  }
}